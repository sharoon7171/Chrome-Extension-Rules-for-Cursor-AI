---
description: Coding style rules for simple functions, no frameworks, and professional modular project structure with .mjs module support
globs: ['**/*']
alwaysApply: true
---

# Strict Coding Style and Professional Project Structure Rules

## Core Coding Principles
- **Write code with simple style functions** - Keep functions clean and straightforward
- **Use vanilla coding languages** - HTML, CSS, JavaScript, or any language without external dependencies
- **NO component libraries or frameworks** - Build everything from scratch for full control
- **STRICT professional modular project structure** - Organize code logically with mandatory separation of concerns
- **MANDATORY logical file division** - Each file must serve one specific purpose only
- **Support .mjs file extensions** for ES6+ modules and modern JavaScript syntax

## ⚠️ CRITICAL .mjs File Usage Rules (Chrome Extensions)

### ✅ ALLOWED .mjs Files in Chrome Extensions
- **Background service workers** - when manifest.json specifies `"type": "module"`
- **Popup/options page scripts** - when HTML uses `type="module"`
- **Utility modules** - shared functionality between scripts
- **Type definition files** - when using TypeScript with .mjs
- **Any JavaScript file with import/export statements**

### ❌ NOT ALLOWED .mjs Files in Chrome Extensions
- **Content scripts** - Chrome does NOT support ES modules in content scripts
- **HTML files** - must use .html extension
- **CSS files** - must use .css extension
- **JSON files** - must use .json extension
- **Image files** - must use appropriate image extensions (.png, .jpg, .svg, etc.)
- **Configuration files** - manifest.json, package.json, etc.
- **Documentation files** - README files, markdown files
- **Build tool configs** - webpack.config.js, babel.config.js, etc.
- **Any non-JavaScript files** - .mjs is ONLY for ES6+ modules

### Chrome Extension File Requirements
```
✅ CORRECT:
- background.mjs          # Background service worker with ES6+ modules
- popup.mjs               # Popup script with import/export
- utils.mjs               # Utility functions module
- types.mjs               # TypeScript type definitions

❌ INCORRECT:
- content-script.mjs      # Content scripts cannot use ES modules
- popup.html.mjs          # HTML should be .html
- styles.css.mjs          # CSS should be .css
- config.json.mjs         # JSON should be .json
- README.md.mjs           # Documentation should be .md
- manifest.json.mjs       # Extension manifest must be .json
```

## STRICT Professional Project Structure

### MANDATORY Directory Organization
```
project/
├── src/                    # Source code root (MANDATORY)
│   ├── pages/             # Page-specific implementations
│   │   ├── home/
│   │   │   ├── home.component.html
│   │   │   ├── home.component.css
│   │   │   ├── home.component.mjs
│   │   │   ├── home.service.mjs
│   │   │   └── home.types.mjs
│   │   ├── dashboard/
│   │   │   ├── dashboard.component.html
│   │   │   ├── dashboard.component.css
│   │   │   ├── dashboard.component.mjs
│   │   │   ├── dashboard.service.mjs
│   │   │   └── dashboard.types.mjs
│   │   └── auth/
│   │       ├── login/
│   │       │   ├── login.component.html
│   │       │   ├── login.component.css
│   │       │   ├── login.component.mjs
│   │       │   └── login.service.mjs
│   │       └── register/
│   │           ├── register.component.html
│   │           ├── register.component.css
│   │           ├── register.component.mjs
│   │           └── register.service.mjs
│   ├── components/         # Reusable UI components (MANDATORY)
│   │   ├── common/
│   │   │   ├── button/
│   │   │   │   ├── button.component.html
│   │   │   │   ├── button.component.css
│   │   │   │   ├── button.component.mjs
│   │   │   │   └── button.types.mjs
│   │   │   ├── input/
│   │   │   │   ├── input.component.html
│   │   │   │   ├── input.component.css
│   │   │   │   ├── input.component.mjs
│   │   │   │   └── input.types.mjs
│   │   │   └── modal/
│   │   │       ├── modal.component.html
│   │   │       ├── modal.component.css
│   │   │       ├── modal.component.mjs
│   │   │       └── modal.types.mjs
│   │   ├── layout/
│   │   │   ├── header/
│   │   │   │   ├── header.component.html
│   │   │   │   ├── header.component.css
│   │   │   │   ├── header.component.mjs
│   │   │   │   └── header.service.mjs
│   │   │   ├── sidebar/
│   │   │   │   ├── sidebar.component.html
│   │   │   │   ├── sidebar.component.css
│   │   │   │   ├── sidebar.component.mjs
│   │   │   │   └── sidebar.service.mjs
│   │   │   └── footer/
│   │   │       ├── footer.component.html
│   │   │       ├── footer.component.css
│   │   │       ├── footer.component.mjs
│   │   │       └── footer.service.mjs
│   │   └── business/
│   │       ├── data-table/
│   │       │   ├── data-table.component.html
│   │       │   ├── data-table.component.css
│   │       │   ├── data-table.component.mjs
│   │       │   └── data-table.service.mjs
│   │       └── chart/
│   │           ├── chart.component.html
│   │           ├── chart.component.css
│   │           ├── chart.component.mjs
│   │           └── chart.service.mjs
│   ├── services/           # Business logic and data services (MANDATORY)
│   │   ├── api/
│   │   │   ├── api.client.mjs
│   │   │   ├── api.config.mjs
│   │   │   ├── api.interceptor.mjs
│   │   │   └── api.types.mjs
│   │   ├── auth/
│   │   │   ├── auth.service.mjs
│   │   │   ├── auth.guard.mjs
│   │   │   └── auth.types.mjs
│   │   ├── storage/
│   │   │   ├── local-storage.service.mjs
│   │   │   ├── session-storage.service.mjs
│   │   │   └── storage.types.mjs
│   │   └── utils/
│   │       ├── validation.service.mjs
│   │       ├── formatting.service.mjs
│   │       ├── date.service.mjs
│   │       └── utils.types.mjs
│   ├── core/               # Core application logic (MANDATORY)
│   │   ├── app/
│   │   │   ├── app.core.mjs
│   │   │   ├── app.config.mjs
│   │   │   ├── app.routes.mjs
│   │   │   └── app.types.mjs
│   │   ├── state/
│   │   │   ├── state.manager.mjs
│   │   │   ├── state.store.mjs
│   │   │   └── state.types.mjs
│   │   ├── router/
│   │   │   ├── router.core.mjs
│   │   │   ├── router.guards.mjs
│   │   │   └── router.types.mjs
│   │   └── events/
│   │       ├── event.bus.mjs
│   │       ├── event.emitter.mjs
│   │       └── event.types.mjs
│   ├── styles/             # Global and shared styles (MANDATORY)
│   │   ├── base/
│   │   │   ├── base.reset.css
│   │   │   ├── base.typography.css
│   │   │   ├── base.variables.css
│   │   │   └── base.utilities.css
│   │   ├── layout/
│   │   │   ├── layout.grid.css
│   │   │   ├── layout.containers.css
│   │   │   ├── layout.spacing.css
│   │   │   └── layout.flexbox.css
│   │   ├── themes/
│   │   │   ├── theme.light.css
│   │   │   ├── theme.dark.css
│   │   │   └── theme.variables.css
│   │   └── components/
│   │       ├── component.buttons.css
│   │       ├── component.forms.css
│   │       └── component.navigation.css
│   ├── types/              # Type definitions and interfaces (MANDATORY)
│   │   ├── global.types.mjs
│   │   ├── api.types.mjs
│   │   ├── component.types.mjs
│   │   └── service.types.mjs
│   └── constants/          # Application constants (MANDATORY)
│       ├── app.constants.mjs
│       ├── api.constants.mjs
│       ├── ui.constants.mjs
│       └── validation.constants.mjs
├── public/                 # Public assets (MANDATORY)
│   ├── assets/
│   │   ├── images/
│   │   │   ├── icons/
│   │   │   ├── logos/
│   │   │   └── backgrounds/
│   │   ├── fonts/
│   │   │   ├── primary/
│   │   │   └── secondary/
│   │   └── media/
│   │       ├── videos/
│   │       └── audio/
│   ├── favicon.ico
│   ├── robots.txt
│   └── sitemap.xml
├── tests/                  # Test files (MANDATORY)
│   ├── unit/
│   │   ├── components/
│   │   ├── services/
│   │   └── utils/
│   ├── integration/
│   │   ├── api/
│   │   └── components/
│   └── e2e/
│       ├── pages/
│       └── workflows/
├── docs/                   # Documentation (MANDATORY)
│   ├── api/
│   │   ├── endpoints.md
│   │   ├── authentication.md
│   │   └── error-codes.md
│   ├── components/
│   │   ├── component-api.md
│   │   ├── component-usage.md
│   │   └── component-examples.md
│   ├── architecture/
│   │   ├── project-structure.md
│   │   ├── data-flow.md
│   │   └── security.md
│   └── setup/
│       ├── installation.md
│       ├── configuration.md
│       └── deployment.md
├── config/                 # Configuration files (MANDATORY)
│   ├── build/
│   │   ├── webpack.config.mjs
│   │   ├── babel.config.mjs
│   │   └── postcss.config.mjs
│   ├── environment/
│   │   ├── .env.development
│   │   ├── .env.staging
│   │   └── .env.production
│   └── linting/
│       ├── .eslintrc.mjs
│       ├── .prettierrc.mjs
│       └── .stylelintrc.mjs
└── scripts/                # Build and utility scripts (MANDATORY)
    ├── build/
    │   ├── build.dev.mjs
    │   ├── build.prod.mjs
    │   └── build.analyze.mjs
    ├── deploy/
    │   ├── deploy.staging.mjs
    │   └── deploy.production.mjs
    └── utils/
        ├── generate.component.mjs
        ├── generate.service.mjs
        └── cleanup.mjs
```

### MANDATORY File Division Principles
- **STRICT single responsibility** - Each file must serve exactly one purpose
- **MANDATORY logical separation** - HTML structure, styles, and logic must be in separate files
- **COMPONENT-BASED architecture** - Every UI element must be a separate component
- **SERVICE LAYER separation** - Business logic must be separated from UI components
- **TYPE DEFINITION files** - Every component and service must have corresponding type files
- **CONSTANT separation** - All constants must be in dedicated constant files
- **NO mixed concerns** - Never combine different types of functionality in one file
- **ES6+ module support** - Use .mjs extensions for all JavaScript modules
- **CORRECT file extensions** - .mjs ONLY for JavaScript modules, never for HTML/CSS/JSON

### MANDATORY File Naming Conventions

#### Component Files
```
[component-name].component.html    # HTML structure
[component-name].component.css     # Component styles
[component-name].component.mjs     # Component logic (ES6+ modules)
[component-name].service.mjs       # Component-specific services
[component-name].types.mjs         # Component type definitions
```

#### Service Files
```
[service-name].service.mjs         # Service implementation (ES6+ modules)
[service-name].types.mjs           # Service type definitions
[service-name].config.mjs          # Service configuration
[service-name].interceptor.mjs     # Service interceptors
```

#### Core Files
```
[core-name].core.mjs               # Core functionality (ES6+ modules)
[core-name].config.mjs             # Core configuration
[core-name].routes.mjs             # Routing logic
[core-name].types.mjs              # Core type definitions
```

#### Style Files
```
[category-name].[purpose].css      # Categorized styles
base.[purpose].css                 # Base styles
layout.[purpose].css               # Layout styles
theme.[purpose].css                # Theme styles
component.[purpose].css            # Component styles
```

#### Type Files
```
[category-name].types.mjs          # Category-specific types (ES6+ modules)
global.types.mjs                   # Global type definitions
api.types.mjs                      # API-related types
component.types.mjs                # Component types
service.types.mjs                  # Service types
```

### MANDATORY Code Organization Rules

#### HTML Structure
- **Semantic HTML only** - Use proper HTML5 semantic elements
- **Accessibility first** - Include ARIA labels and roles
- **Clean markup** - No unnecessary divs or spans
- **Component structure** - Each component must have a root element with component class
- **Module script tags** - Use type="module" for .mjs files
- **CORRECT extensions** - HTML files must use .html, never .mjs

#### CSS Organization
- **Component-scoped styles** - Use BEM methodology or CSS modules
- **CSS custom properties** - Use CSS variables for theming
- **Logical grouping** - Group related styles together
- **Responsive design** - Mobile-first approach with breakpoints
- **CORRECT extensions** - CSS files must use .css, never .mjs

#### JavaScript Architecture
- **ES6+ module syntax** - Use import/export statements exclusively
- **Class-based components** - Use ES6 classes for components
- **Service injection** - Inject dependencies through constructor
- **Event-driven communication** - Use custom events for component communication
- **State management** - Centralized state with proper immutability
- **Module compatibility** - Ensure all modules work in Chrome extension context
- **CORRECT extensions** - JavaScript modules use .mjs, regular scripts use .js

### MANDATORY Import and Export Structure

#### Component Exports
```javascript
// [component-name].component.mjs
export class ComponentName {
    constructor() {
        // Component initialization
    }
    
    // Component methods
}

// Default export for component
export default ComponentName;
```

#### Service Exports
```javascript
// [service-name].service.mjs
export class ServiceName {
    constructor() {
        // Service initialization
    }
    
    // Service methods
}

// Default export for service
export default ServiceName;
```

#### Type Exports
```javascript
// [category-name].types.mjs
export interface ComponentProps {
    // Component properties
}

export type ComponentState = {
    // Component state
};

export enum ComponentEvents {
    // Component events
}
```

#### Module Import Examples
```javascript
// Import from local modules
import { ComponentName } from './component-name.component.mjs';
import { ServiceName } from '../services/service-name.service.mjs';

// Import from constants
import { API_ENDPOINTS } from '../constants/api.constants.mjs';

// Import from types
import type { ComponentProps } from './component-name.types.mjs';

// Import with attributes (ES2025+)
import data from './data.json' with { type: 'json' };
```

### MANDATORY File Creation Rules
- **Create complete component structure** - All component files must be created together
- **Include type definitions** - Every component must have corresponding types
- **Add to documentation** - Update component documentation immediately
- **Create tests** - Unit tests must be created with components
- **Update imports** - All related files must be updated with new imports
- **Use .mjs extensions** - All JavaScript files must use .mjs for ES6+ modules
- **VERIFY file types** - Ensure .mjs is only used for JavaScript modules

### MANDATORY Quality Standards
- **ESLint compliance** - All JavaScript must pass linting
- **Prettier formatting** - Consistent code formatting
- **TypeScript strict mode** - If using TypeScript
- **Accessibility compliance** - WCAG 2.1 AA standards
- **Performance optimization** - Lazy loading and code splitting
- **Security best practices** - Input validation and XSS prevention
- **ES6+ module compliance** - Use modern JavaScript features
- **Chrome extension compatibility** - Ensure modules work in extension context
- **File extension validation** - Prevent .mjs misuse

## Implementation Guidelines

### Before Creating Any File
1. **Verify component doesn't exist** - Check for existing implementations
2. **Plan complete structure** - Design all related files
3. **Define types first** - Create type definitions before implementation
4. **Plan dependencies** - Identify required services and utilities
5. **Get user approval** - Confirm the planned structure
6. **Verify .mjs compatibility** - Ensure Chrome extension support
7. **Verify file type** - Ensure .mjs is only used for JavaScript modules

### Component Creation Process
1. **Create type definitions** - Define interfaces and types
2. **Create service files** - Implement business logic
3. **Create component files** - Implement UI components
4. **Create style files** - Implement component styling
5. **Update documentation** - Document component usage
6. **Create tests** - Implement unit and integration tests
7. **Update imports** - Update all related files
8. **Verify module syntax** - Test .mjs import/export functionality
9. **Verify file extensions** - Ensure .mjs is only used for JavaScript

### Service Creation Process
1. **Define service interface** - Create type definitions
2. **Implement service logic** - Create service implementation
3. **Add error handling** - Implement proper error handling
4. **Add logging** - Implement service logging
5. **Create tests** - Implement service tests
6. **Update documentation** - Document service API
7. **Verify module exports** - Test .mjs export functionality
8. **Verify file extensions** - Ensure .mjs is only used for JavaScript

## Benefits of Strict Structure
- **Predictable organization** - Every developer knows where to find code
- **Easier maintenance** - Clear separation of concerns
- **Better testing** - Isolated components are easier to test
- **Improved performance** - Better tree-shaking and code splitting
- **Team collaboration** - Consistent structure across team members
- **Scalability** - Easy to add new features without breaking existing code
- **Code reusability** - Components can be easily reused across the application
- **Professional standards** - Industry-standard architecture patterns
- **Modern JavaScript support** - ES6+ modules with .mjs extensions
- **Chrome extension compliance** - Full support for latest policies
- **Future-proof architecture** - Ready for upcoming JavaScript features
- **Prevent file extension mistakes** - Clear guidelines for .mjs usage

- **Latest language standards** for optimal performance
- **Industry best practices** for maintainability
- **Future-proof code** using cutting-edge language features
- **Maximum performance** from latest language optimizations
- **ES6+ module system** for modern development workflows
