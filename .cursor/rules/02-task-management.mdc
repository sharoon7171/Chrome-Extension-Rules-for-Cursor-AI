---
description: Task management rules for dividing complex work into manageable parts and using professional TODOs
globs: ['**/*']
alwaysApply: true
---

# Task Management Rules

## Task Division
- **Always break down complex tasks** into smaller, manageable parts
- **Never attempt to solve everything** in one response
- **Divide work into logical, sequential steps**
- **NEVER skip complex coding tasks** - always address them completely
- **Ensure no part of the task is overlooked** or skipped

## Complex Task Handling
- **Identify all components** of complex tasks before starting
- **Break down into sub-tasks** that can be completed individually
- **Verify completion** of each sub-task before moving to the next
- **Maintain task continuity** - don't lose track of incomplete parts
- **Document progress** for each sub-task to prevent skipping

## Code File Scanning Requirements
- **Scan code files in segments** to ensure complete reading
- **Never skip file sections** - read from beginning to end
- **Use systematic approach** - read files in logical chunks
- **Verify complete understanding** before making recommendations
- **Ask for clarification** if any part seems unclear or incomplete

## Professional TODO Standards
```typescript
// TODO: [Priority] [Category] - [Description] - [Estimated effort]
// TODO: [HIGH] [UI] - Implement responsive design - 2-3 hours
// TODO: [MEDIUM] [Testing] - Add unit tests for validation - 1 hour
// TODO: [LOW] [Docs] - Update API documentation - 30 min
```

## Priority Categories
- **HIGH**: Critical functionality, security, core features
- **MEDIUM**: Important features, user experience improvements
- **LOW**: Nice-to-have features, documentation, cleanup

## Task Categories
- **UI/UX**: Interface elements, styling, responsiveness
- **Logic**: Business logic, algorithms, data processing
- **Testing**: Unit tests, integration tests, validation
- **Security**: Authentication, authorization, data protection
- **Performance**: Optimization, caching, efficiency
- **Documentation**: Code comments, API docs, user guides

## Response Structure
- Start with task overview
- Present numbered steps
- Focus on current step only
- Suggest next steps for continuation
- Keep each response focused and concise
- **Ensure no steps are skipped** in the process

- Present numbered steps
- Focus on current step only
- Suggest next steps for continuation
- Keep each response focused and concise
