---
description: Rule verification system to ensure Cursor AI agent cannot start without all required rules being present and properly configured
globs: ['**/*']
alwaysApply: true
---

# Rule Verification System (CRITICAL - DO NOT REMOVE)

## Core Principle
- **Cursor AI agent MUST verify all rules before starting any operations**
- **ALL 13 rule files must be present, valid, and properly configured**
- **No AI operations allowed without complete rule verification**
- **This verification system runs BEFORE any other AI functionality**

## Required Rule Files Verification

### Essential Rules (14 Total)
1. **00-essential-rules-enforcement.mdc** - Rules enforcement foundation
2. **01-core-behavior.mdc** - Core AI behavior optimization
3. **02-task-management.mdc** - Task division and management
4. **03-code-generation.mdc** - Code generation rules
5. **04-file-handling.mdc** - File operation guidelines
6. **05-coding-style-and-structure.mdc** - Coding standards and structure
7. **06-anti-duplication-and-imports.mdc** - Import management
8. **07-comprehensive-verification.mdc** - Complete verification
9. **08-user-approval-required.mdc** - User approval requirements
10. **09-comprehensive-code-analysis.mdc** - Code analysis rules
11. **10-terminal-verification.mdc** - Terminal verification
12. **11-chrome-extension-compliance.mdc** - Chrome extension compliance
13. **12-git-operations-approval.mdc** - Git operations approval
14. **verify-rules.mdc** - Rule verification system

## Rule Verification Process

### Pre-Startup Verification
1. **Check rule file existence** - all 13 files must be present
2. **Validate YAML frontmatter** - proper structure and syntax
3. **Verify rule settings** - `alwaysApply: true` and `globs: ['**/*']`
4. **Test rule loading** - ensure rules can be loaded by Cursor
5. **Confirm rule activation** - all rules must be active

### Verification Commands
```bash
# Check rule file count (must be exactly 14)
RULE_COUNT=$(find .cursor/rules -name "*.mdc" | wc -l)
if [ "$RULE_COUNT" -ne 14 ]; then
    echo "❌ ERROR: Expected 14 rules, found $RULE_COUNT"
    exit 1
fi

# Verify all required rule files exist
REQUIRED_RULES=(
    "00-essential-rules-enforcement.mdc"
    "01-core-behavior.mdc"
    "02-task-management.mdc"
    "03-code-generation.mdc"
    "04-file-handling.mdc"
    "05-coding-style-and-structure.mdc"
    "06-anti-duplication-and-imports.mdc"
    "07-comprehensive-verification.mdc"
    "08-user-approval-required.mdc"
    "09-comprehensive-code-analysis.mdc"
    "10-terminal-verification.mdc"
    "11-chrome-extension-compliance.mdc"
    "12-git-operations-approval.mdc"
    "verify-rules.mdc"
)

for rule in "${REQUIRED_RULES[@]}"; do
    if [ ! -f ".cursor/rules/$rule" ]; then
        echo "❌ ERROR: Missing required rule: $rule"
        exit 1
    fi
done

# Verify YAML frontmatter
for rule in .cursor/rules/*.mdc; do
    if ! grep -q "description:" "$rule" || ! grep -q "globs:" "$rule" || ! grep -q "alwaysApply:" "$rule"; then
        echo "❌ ERROR: Incomplete frontmatter in: $(basename "$rule")"
        exit 1
    fi
done

# Verify rule settings
for rule in .cursor/rules/*.mdc; do
    if ! grep -q "alwaysApply: true" "$rule" || ! grep -q "globs: \['\*\*/\*'\]" "$rule"; then
        echo "❌ ERROR: Incorrect settings in: $(basename "$rule")"
        exit 1
    fi
done

echo "✅ All rules verified successfully"
```

## Rule Loading Sequence

### Sequential Loading Order
1. **Load 00-essential-rules-enforcement.mdc** first (foundation)
2. **Load remaining rules** in numerical order
3. **Verify each rule** loads without errors
4. **Activate all rules** with `alwaysApply: true`
5. **Confirm rule scope** applies to `['**/*']`

### Loading Verification
```bash
# Test rule loading sequence
echo "Loading rule: 00-essential-rules-enforcement.mdc"
# Load and verify foundation rules

echo "Loading rule: 01-core-behavior.mdc"
# Load and verify core behavior rules

# Continue for all 13 rules...

echo "All rules loaded successfully"
```

## Rule Integrity Checks

### Content Validation
- **No empty rule files** - all rules must have content
- **Proper markdown syntax** - valid markdown formatting
- **No corrupted characters** - clean, readable content
- **Consistent formatting** - uniform rule structure

### Structure Validation
- **YAML frontmatter** - complete and valid
- **Rule content** - meaningful and actionable
- **File naming** - consistent naming convention
- **File permissions** - readable by Cursor AI

## Emergency Procedures

### Rule Loading Failure
1. **Stop AI startup immediately**
2. **Report missing or corrupted rules**
3. **Attempt rule recovery** from backups
4. **Verify rule integrity** after recovery
5. **Restart verification process**

### Rule Corruption Detection
1. **Identify corrupted rule files**
2. **Check file integrity** and permissions
3. **Restore from version control** if needed
4. **Validate restored rules** completely
5. **Resume startup process**

## Rule Dependencies

### Critical Dependencies
- **00-essential-rules-enforcement.mdc** - Required by all other rules
- **01-core-behavior.mdc** - Required for AI behavior
- **08-user-approval-required.mdc** - Required for safety
- **11-chrome-extension-compliance.mdc** - Required for compliance

### Dependency Resolution
- **Load order enforcement** - rules load in sequence
- **Circular dependency prevention** - no circular references
- **Conflict resolution** - handle rule conflicts
- **Dependency validation** - verify all dependencies met

## Performance Optimization

### Rule Loading Optimization
- **Parallel loading** where possible
- **Caching mechanisms** for frequently used rules
- **Lazy loading** for non-critical rules
- **Rule compilation** for faster execution

### Memory Management
- **Efficient rule storage** - minimize memory usage
- **Rule cleanup** - remove unused rules
- **Memory monitoring** - track rule memory usage
- **Optimization suggestions** - improve rule efficiency

## Monitoring and Maintenance

### Rule Health Monitoring
- **Daily rule checks** - verify all rules exist
- **Weekly integrity scans** - check rule content
- **Monthly performance review** - optimize rule loading
- **Quarterly rule audits** - comprehensive review

### Rule Update Procedures
1. **Backup current rules** before updates
2. **Test rule changes** in development
3. **Validate rule functionality** completely
4. **Deploy updated rules** to production
5. **Verify rule operation** after deployment

## Integration with Cursor AI

### Startup Integration
- **Pre-startup verification** - check all rules before AI starts
- **Rule loading integration** - load rules during startup
- **Activation confirmation** - confirm all rules active
- **Startup completion** - only after rule verification

### Runtime Integration
- **Rule enforcement** - apply rules to all AI operations
- **Rule monitoring** - track rule usage and effectiveness
- **Rule updates** - handle runtime rule modifications
- **Rule reporting** - provide rule status information

## Benefits of Rule Verification

### AI Agent Safety
- **Prevents unauthorized operations** without proper rules
- **Ensures consistent behavior** across all operations
- **Maintains code quality** through enforced standards
- **Protects project integrity** with mandatory guidelines

### Development Consistency
- **Standardized workflows** across all team members
- **Predictable AI behavior** in all contexts
- **Quality assurance** through enforced rules
- **Professional standards** maintained automatically

### Compliance and Security
- **Chrome extension compliance** enforced automatically
- **Security best practices** applied consistently
- **User approval requirements** never bypassed
- **Code verification** always performed

## Conclusion

This rule verification system ensures that Cursor AI cannot start or function without all required rules being present, valid, and properly configured. It serves as the gatekeeper for all AI operations and must never be bypassed or modified without proper authorization.

**Remember: No AI startup without complete rule verification!**

## Verification Status

- **Rule files present**: ✅ 14/14
- **Frontmatter complete**: ✅ 14/14
- **Settings correct**: ✅ 14/14
- **Rules loadable**: ✅ 14/14
- **Rules active**: ✅ 14/14

**Status: ALL RULES VERIFIED - CURSOR AI CAN START**
