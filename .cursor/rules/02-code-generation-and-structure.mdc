---
description: Code generation rules, coding style standards, professional project structure, and anti-duplication guidelines with .mjs module support
globs: ['**/*']
alwaysApply: true
---

# Code Generation and Project Structure Rules

## 🚨 **CRITICAL RULE: NEVER REWRITE ENTIRE FILES (100% COMPLIANCE)**

### Core Principle
- **NEVER write complete code files** unless explicitly requested
- **ONLY provide necessary changes** or additions to existing code
- **Focus on specific modifications** rather than full file rewrites
- **STRICT professional modular project structure** with mandatory separation of concerns
- **Support .mjs file extensions** for ES6+ modules and modern JavaScript syntax

## 1. 🚨 **MANDATORY MINIMAL CHANGE RULES (CRITICAL - 100% COMPLIANCE)**

### Rule 1: NEVER Rewrite Existing Files
- **EXISTING FILES ARE OFF-LIMITS** for complete rewrites
- **ONLY modify specific lines** that need changes
- **PRESERVE ALL existing code** unless explicitly told to remove
- **USE Cursor AI editor** for targeted modifications
- **SHOW ONLY what needs to change** - never the entire file

### Rule 2: Mandatory Change Format
```
// ONLY show the specific change needed:

// Add this function after line 45:
function newFunction() {
    // Implementation here
}

// OR

// Replace line 23:
- oldCode();
+ newCode();

// OR

// Insert after line 67:
// ... existing code ...
newCode();
// ... existing code ...
```

### Rule 3: File Rewrite Prevention
- **If file exists**: ONLY show changes, never rewrite
- **If file is new**: Provide minimal boilerplate + specific additions
- **If file is large**: Break into smaller, focused modifications
- **If file is complex**: Use incremental approach, one change at a time

### Rule 4: Token Efficiency Enforcement
- **Prevent token overflow** by showing minimal changes
- **Avoid network timeouts** from unnecessary code generation
- **Focus on specific functionality** rather than complete rewrites
- **Maintain context** across task segments

## 2. 🚨 **PROFESSIONAL COMMON CODE STRUCTURE ENFORCEMENT (CRITICAL - 100% COMPLIANCE)**

### Core Principle
- **SIMPLE, PROFESSIONAL project structure** with STRICT common code organization
- **NO CODE DUPLICATION - EVER!** This is a MANDATORY, NON-NEGOTIABLE RULE
- **ALL shared code goes in common directory** - utils, components, services, hooks, constants, types, styles
- **BEFORE adding ANY new code**: Check if it already exists somewhere
- **If code exists**: Move it to common location and reuse
- **If code doesn't exist**: Create it in common location for future reuse
- **Professional Chrome extension structure** - follow Manifest V3 best practices
- **Vanilla JavaScript approach** - NO frameworks, NO libraries, NO TypeScript
- **Chrome extension compliance** - Use .js for regular scripts, .mjs for ES6 modules as per Chrome 136+ policies
- **MAXIMUM REUSABILITY** - Every piece of code can be reused anywhere in the project

### Rule 1: Mandatory Common Code Organization
```
src/
├── common/                    # ALL SHARED CODE GOES HERE (MANDATORY)
│   ├── utils/                # Utility functions (formatDate, validateEmail, etc.)
│   ├── components/           # Reusable UI components (Button, Modal, Input, etc.)
│   ├── hooks/                # Custom hooks (useAuth, useStorage, etc.)
│   ├── services/             # Business logic services (apiService, storageService, etc.)
│   ├── constants/            # App constants and configuration
│   ├── types/                # Type definitions and interfaces
│   └── styles/               # Common CSS styles and themes
├── pages/                     # Page-specific code
│   ├── popup/                # Popup page
│   ├── options/              # Options page
│   └── background/           # Background service worker
├── content/                   # Content scripts
└── assets/                    # Icons, images, etc.
```

### Rule 1.1: STRICT COMMON CODE APPROACH (NEW - CRITICAL)
- **NO CODE DUPLICATION - EVER!** This is a MANDATORY, NON-NEGOTIABLE RULE
- **BEFORE adding ANY new code**: Search entire project for similar functionality
- **If similar code exists**: Move it to common location and reuse
- **If no similar code**: Create in common location for future reuse
- **MAXIMUM REUSABILITY** - if you create a button, you can reuse it everywhere
- **COMMON CODE FIRST** - always check common before creating new

#### Example: Button Component Common Structure
```
src/
├── common/
│   └── components/
│       └── Button/                # Button component in common
│           ├── Button.mjs          # Button component logic (ES6 module)
│           ├── Button.css          # Button styles
│           └── Button.html         # Button HTML template
├── pages/
│   ├── popup/
│   │   └── popup.mjs              # Import Button from common (ES6 module)
│   └── options/
│       └── options.mjs            # Import Button from common (ES6 module)
└── content/
    └── content.mjs                # Import Button from common (ES6 module)
```

#### Example: Options Page Common Structure (NEW)
```
src/
├── common/
│   ├── components/
│   │   ├── Header/                 # Header component in common
│   │   ├── Sidebar/                # Sidebar component in common
│   │   ├── Form/                   # Form components in common
│   │   └── Button/                 # Button component in common
│   ├── services/
│   │   ├── storageService.mjs      # Storage service in common (ES6 module)
│   │   └── configService.mjs       # Config service in common (ES6 module)
│   └── utils/
│       └── validationUtils.mjs     # Validation utils in common (ES6 module)
├── pages/
│   └── options/                    # Options page (simple structure)
│       ├── options.html            # Main options HTML
│       ├── options.css             # Options-specific styles
│       └── options.mjs             # Options-specific logic (imports from common, ES6 module)
```

### Rule 1.2: STRICT COMMON CODE BENEFITS (NEW - CRITICAL)
- **NO CODE DUPLICATION** - Single source of truth for all functionality
- **EASY MAINTENANCE** - Fix bugs in one place, affects everywhere
- **CLEAR ORGANIZATION** - Simple, professional structure
- **TEAM COLLABORATION** - Clear structure for multiple developers
- **VERSION CONTROL** - Easy to track changes to common code
- **TESTING** - Test common code once, works everywhere
- **SCALABILITY** - Easy to add new features using existing common code

#### Example: Reusing Button Component Everywhere
```
# In Popup page - reuse Button component
import { Button } from '../common/components/Button/Button.mjs';

# In Options page - reuse Button component  
import { Button } from '../common/components/Button/Button.mjs';

# In Content script - reuse Button component
import { Button } from '../common/components/Button/Button.mjs';

# In Background script - reuse Button component
import { Button } from '../common/components/Button/Button.mjs';
```

#### Example: Reusing Button Styles Everywhere
```css
/* In Popup.css - reuse Button styles */
@import url('../common/components/Button/Button.css');

/* In Options.css - reuse Button styles */
@import url('../common/components/Button/Button.css');

/* In Content.css - reuse Button styles */
@import url('../common/components/Button/Button.css');
```

### Rule 1.3: STRICT COMMON CODE WORKFLOW (NEW - CRITICAL)

#### **🚨 MANDATORY COMMON CODE RULES (NON-NEGOTIABLE)**

##### **Rule 1: Code Duplication Prevention (100% COMPLIANCE)**
- **BEFORE adding ANY new code**: Search entire project for similar functionality
- **If similar code exists**: Move it to common location and reuse
- **If no similar code**: Create in common location for future reuse
- **NEVER create duplicate functionality** - this is a **ZERO TOLERANCE RULE**

##### **Rule 2: Common Code Organization (100% COMPLIANCE)**
- **ALL shared code** goes in `src/common/` directory
- **ALL reusable components** go in `src/common/components/`
- **ALL utility functions** go in `src/common/utils/`
- **ALL business logic** goes in `src/common/services/`
- **ALL shared styles** go in `src/common/styles/`

##### **Rule 3: Code Reuse Verification (100% COMPLIANCE)**
- **Before implementing ANY feature**: Check common code first
- **Before creating ANY component**: Check if it exists in common
- **Before writing ANY function**: Check if similar function exists
- **Always import from common** instead of creating new

### Rule 1.4: AUTOMATIC COMMON CODE INTELLIGENCE (NEW - CRITICAL)
- **Cursor AI MUST automatically detect** what common code already exists
- **BEFORE creating ANY new code**: Search entire project for similar functionality
- **Automatically analyze requirements** and check common code first
- **Intelligent code reuse detection** based on functionality description
- **Automatic common code organization** for all shared functionality

#### Automatic Common Code Detection Examples:

**When User Says "Add Some Option":**
**AUTOMATICALLY DETECT AND CHECK:**

1. **Form Components (Check Common First):**
   - Search for existing radio buttons, checkboxes, inputs
   - If found: Import from common and reuse
   - If not found: Create in common for future reuse
   - NEVER create duplicate form components

2. **Layout Components (Check Common First):**
   - Search for existing form containers, field groups
   - If found: Import from common and reuse
   - If not found: Create in common for future reuse
   - NEVER create duplicate layout components

3. **Interactive Components (Check Common First):**
   - Search for existing buttons, toggles, sliders
   - If found: Import from common and reuse
   - If not found: Create in common for future reuse
   - NEVER create duplicate interactive components

**When User Says "Create Settings Page":**
**AUTOMATICALLY DETECT AND CHECK:**

1. **All Form Elements (Check Common First):**
   - Search for existing text inputs, checkboxes, radio buttons
   - If found: Import from common and reuse
   - If not found: Create in common for future reuse
   - NEVER create duplicate form elements

2. **All Layout Elements (Check Common First):**
   - Search for existing headers, sidebars, navigation
   - If found: Import from common and reuse
   - If not found: Create in common for future reuse
   - NEVER create duplicate layout elements

3. **All Interactive Elements (Check Common First):**
   - Search for existing buttons, modals, tooltips
   - If found: Import from common and reuse
   - If not found: Create in common for future reuse
   - NEVER create duplicate interactive elements

**When User Says "Add Search Functionality":**
**AUTOMATICALLY DETECT AND CHECK:**

1. **Search Components (Check Common First):**
   - Search for existing search inputs, buttons, result containers
   - If found: Import from common and reuse
   - If not found: Create in common for future reuse
   - NEVER create duplicate search components

2. **Results Components (Check Common First):**
   - Search for existing result lists, cards, pagination
   - If found: Import from common and reuse
   - If not found: Create in common for future reuse
   - NEVER create duplicate result components

#### When User Says "Create Button Component"
**AUTOMATICALLY CHECK COMMON FIRST:**

1. **Search for Existing Button (MANDATORY):**
   ```bash
   # Search entire project for button functionality
   grep -r "button\|Button" src/
   ls src/common/components/ | grep -i "button"
   ```

2. **If Button Exists in Common:**
   ```javascript
   // ✅ REUSE EXISTING - Import from common
   import { Button } from '../common/components/Button/Button.js';
   ```

3. **If Button Doesn't Exist:**
   ```javascript
   // ✅ CREATE IN COMMON - Simple structure
   src/common/components/Button/
   ├── Button.mjs          # Button component logic (ES6 module)
   ├── Button.css          # Button styles
   └── Button.html         # Button HTML template
   ```

4. **NEVER Create Duplicate Button Components**

#### When User Says "Create Options Page"
**AUTOMATICALLY CHECK COMMON FIRST:**

1. **Search for Existing Components (MANDATORY):**
   ```bash
   # Search for existing form components, headers, sidebars
   grep -r "form\|header\|sidebar\|navigation" src/
   ls src/common/components/ | grep -E "(Form|Header|Sidebar|Navigation)"
   ```

2. **If Components Exist in Common:**
   ```javascript
   // ✅ REUSE EXISTING - Import from common
   import { Form } from '../common/components/Form/Form.mjs';
   import { Header } from '../common/components/Header/Header.mjs';
   import { Sidebar } from '../common/components/Sidebar/Sidebar.mjs';
   ```

3. **If Components Don't Exist:**
   ```javascript
   // ✅ CREATE IN COMMON - Simple structure
   src/common/components/Form/     # Form components
   src/common/components/Header/   # Header component
   src/common/components/Sidebar/  # Sidebar component
   ```

4. **Options Page Structure (Simple):**
   ```
   src/pages/options/
   ├── options.html         # Main options HTML
   ├── options.css          # Options-specific styles
   └── options.mjs          # Options-specific logic (imports from common, ES6 module)
   ```

5. **NEVER Create Duplicate Components**

### Rule 1.5: STRICT COMMON CODE WORKFLOW (NEW - CRITICAL)

#### **🚨 MANDATORY IMPLEMENTATION WORKFLOW (NON-NEGOTIABLE)**

##### **Step 1: Code Search (ALWAYS REQUIRED)**
**When User Says ANYTHING, Cursor AI MUST:**

1. **Search entire project** - look for similar functionality
2. **Check common code** - see what already exists
3. **Identify duplicates** - find any code that could be reused
4. **Plan reuse strategy** - determine how to use existing code
5. **NEVER create duplicate functionality** - this is a ZERO TOLERANCE RULE

#### Step 1.1: Cursor AI Thinking Process (NEW - CRITICAL)
**Cursor AI MUST Think Like This:**

**User Input:** "Add some option"
**Cursor AI Analysis:**
- "I need to search for existing form elements first"
- "Check if input fields, checkboxes, radio buttons already exist"
- "If they exist: import from common and reuse"
- "If they don't exist: create in common for future reuse"
- "NEVER create duplicate form elements"

**User Input:** "Create settings page"
**Cursor AI Analysis:**
- "I need to search for existing form components first"
- "Check if text inputs, checkboxes, radio buttons already exist"
- "If they exist: import from common and reuse"
- "If they don't exist: create in common for future reuse"
- "NEVER create duplicate form components"

**User Input:** "Add search functionality"
**Cursor AI Analysis:**
- "I need to search for existing search components first"
- "Check if search inputs, buttons, result containers already exist"
- "If they exist: import from common and reuse"
- "If they don't exist: create in common for future reuse"
- "NEVER create duplicate search components"

#### Step 2: Automatic Common Code Detection
**Example: User Says "Add Some Option"**

**Cursor AI Automatically Checks Common First:**

1. **Form Components (Check Common):**
   ```bash
   # Search for existing form components
   grep -r "radio\|checkbox\|input\|select" src/
   ls src/common/components/ | grep -E "(Radio|Checkbox|Input|Select)"
   ```

2. **If Components Exist in Common:**
   ```javascript
   // ✅ REUSE EXISTING - Import from common
   import { RadioButton } from '../common/components/RadioButton/RadioButton.mjs';
   import { Checkbox } from '../common/components/Checkbox/Checkbox.mjs';
   import { Input } from '../common/components/Input/Input.mjs';
   ```

3. **If Components Don't Exist:**
   ```javascript
   // ✅ CREATE IN COMMON - Simple structure
   src/common/components/RadioButton/  # Radio button component
   src/common/components/Checkbox/     # Checkbox component
   src/common/components/Input/        # Input component
   ```

4. **NEVER Create Duplicate Components**

#### Step 3: Automatic Common Code Organization
**For EACH Component, Cursor AI Automatically Checks Common First:**

```
src/
├── common/                         # ALL shared code goes here
│   ├── components/                # Reusable UI components
│   ├── utils/                     # Utility functions
│   ├── services/                  # Business logic services
│   ├── hooks/                     # Custom hooks
│   ├── constants/                 # App constants
│   ├── types/                     # Type definitions
│   └── styles/                    # Common CSS styles
├── pages/                         # Page-specific code (imports from common)
├── content/                       # Content scripts (imports from common)
└── background/                    # Background scripts (imports from common)
```

#### Step 4: Automatic Common Code Import Setup
**Cursor AI Automatically:**

1. **Searches for existing code** before creating new
2. **Imports from common** instead of creating duplicates
3. **Creates in common** if code doesn't exist
4. **Sets up proper imports** from common to pages
5. **Configures reuse strategy** for all functionality

#### Step 5: Automatic Creation Examples (NEW - CRITICAL)

**Example 1: User Says "Add Some Option"**
**Cursor AI Automatically Creates:**

```
src/
├── components/
│   ├── RadioButton/          # Radio button component
│   ├── Checkbox/             # Checkbox component
│   ├── Input/                # Input field component
│   ├── Select/               # Select dropdown component
│   ├── Table/                # Table component
│   ├── Label/                # Label component
│   ├── FormContainer/        # Form wrapper component
│   ├── FieldGroup/           # Field grouping component
│   ├── Button/               # Action button component
│   └── Toggle/               # Toggle switch component
├── coding/
│   ├── html/
│   │   ├── RadioButton/      # Radio button HTML files
│   │   ├── Checkbox/         # Checkbox HTML files
│   │   ├── Input/            # Input HTML files
│   │   ├── Select/           # Select HTML files
│   │   ├── Table/            # Table HTML files
│   │   ├── Label/            # Label HTML files
│   │   ├── FormContainer/    # Form container HTML files
│   │   ├── FieldGroup/       # Field group HTML files
│   │   ├── Button/           # Button HTML files
│   │   └── Toggle/           # Toggle HTML files
│   ├── css/
│   │   ├── RadioButton/      # Radio button CSS files
│   │   ├── Checkbox/         # Checkbox CSS files
│   │   ├── Input/            # Input CSS files
│   │   ├── Select/           # Select CSS files
│   │   ├── Table/            # Table CSS files
│   │   ├── Label/            # Label CSS files
│   │   ├── FormContainer/    # Form container CSS files
│   │   ├── FieldGroup/       # Field group CSS files
│   │   ├── Button/           # Button CSS files
│   │   └── Toggle/           # Toggle CSS files
│   ├── javascript/
│   │   ├── RadioButton/      # Radio button JS files
│   │   ├── Checkbox/         # Checkbox JS files
│   │   ├── Input/            # Input JS files
│   │   ├── Select/           # Select JS files
│   │   ├── Table/            # Table JS files
│   │   ├── Label/            # Label JS files
│   │   ├── FormContainer/    # Form container JS files
│   │   ├── FieldGroup/       # Field group JS files
│   │   ├── Button/           # Button JS files
│   │   └── Toggle/           # Toggle JS files
│   ├── logic/
│   │   ├── RadioButton/      # Radio button logic files
│   │   ├── Checkbox/         # Checkbox logic files
│   │   ├── Input/            # Input logic files
│   │   ├── Select/           # Select logic files
│   │   ├── Table/            # Table logic files
│   │   ├── Label/            # Label logic files
│   │   ├── FormContainer/    # Form container logic files
│   │   ├── FieldGroup/       # Field group logic files
│   │   ├── Button/           # Button logic files
│   │   └── Toggle/           # Toggle logic files
│   └── functions/
│       ├── RadioButton/      # Radio button function files
│       ├── Checkbox/         # Checkbox function files
│       ├── Input/            # Input function files
│       ├── Select/           # Select function files
│       ├── Table/            # Table function files
│       ├── Label/            # Label function files
│       ├── FormContainer/    # Form container function files
│       ├── FieldGroup/       # Field group function files
│       ├── Button/           # Button function files
│       └── Toggle/           # Toggle function files
```

**Example 2: User Says "Create Settings Page"**
**Cursor AI Automatically Creates:**

```
src/
├── pages/Settings/           # Main settings page
├── components/
│   ├── TextInput/            # Text input component
│   ├── NumberInput/          # Number input component
│   ├── Checkbox/             # Checkbox component
│   ├── RadioButton/          # Radio button component
│   ├── Select/               # Select dropdown component
│   ├── Toggle/               # Toggle switch component
│   ├── Slider/               # Slider component
│   ├── ColorPicker/          # Color picker component
│   ├── FileUpload/           # File upload component
│   ├── Header/               # Page header component
│   ├── Sidebar/              # Sidebar navigation component
│   ├── ContentArea/          # Content area component
│   ├── Footer/               # Page footer component
│   ├── Navigation/           # Navigation menu component
│   ├── Breadcrumb/           # Breadcrumb component
│   ├── Button/               # Action button component
│   ├── Modal/                # Confirmation modal component
│   ├── Tooltip/              # Help tooltip component
│   └── Progress/             # Progress indicator component
```

**Example 3: User Says "Add Search Functionality"**
**Cursor AI Automatically Creates:**

```
src/
├── components/
│   ├── SearchInput/          # Search input field component
│   ├── SearchButton/         # Search button component
│   ├── SearchResults/        # Search results container component
│   ├── SearchFilters/        # Search filters component
│   ├── SearchSuggestions/    # Search suggestions component
│   ├── SearchHistory/        # Search history component
│   ├── ResultList/           # Result list component
│   ├── ResultCard/           # Result card component
│   ├── Pagination/           # Pagination component
│   ├── SortControl/          # Sorting control component
│   └── FilterControl/        # Filter control component
```

### Rule 1.1: Chrome Extension File Extension Compliance (UPDATED - .mjs FIRST POLICY)
- **HTML files**: ALWAYS use `.html` extension
- **CSS files**: ALWAYS use `.css` extension  
- **JavaScript files**: **DEFAULT to `.mjs` for ES6 modules**, use `.js` only where `.mjs` is not allowed
- **Logic files**: **DEFAULT to `.mjs` for ES6 modules**, use `.js` only where `.mjs` is not allowed
- **Function files**: **DEFAULT to `.mjs` for ES6 modules**, use `.js` only where `.mjs` is not allowed
- **Background scripts**: **DEFAULT to `.mjs` for ES6 modules**, use `.js` only where `.mjs` is not allowed
- **Content scripts**: **DEFAULT to `.mjs` for ES6 modules**, use `.js` only where `.mjs` is not allowed
- **Popup/Options scripts**: **DEFAULT to `.mjs` for ES6 modules**, use `.js` only where `.mjs` is not allowed
- **Package.json**: Set `"type": "module"` to ensure `.js` files are treated as ES modules when needed

### Rule 1.2: When to Use .js vs .mjs (UPDATED - .mjs FIRST POLICY)
- **Use .mjs extension by DEFAULT (PREFERRED):**
  - **ALL files that contain ES6 import/export statements**
  - **ALL files that need to be imported by other files**
  - **ALL files that are part of modular architecture**
  - **ALL files that use modern ES6+ module features**
  - **ALL component files, utility files, service files**
  - **ALL files that will be reused across the project**

- **Use .js extension ONLY when .mjs is not allowed:**
  - **Legacy systems that don't support .mjs**
  - **Build tools that require .js extension**
  - **Environments with .mjs compatibility issues**
  - **When explicitly required by external constraints**

- **Chrome Extension Compliance:**
  - **.mjs is the PREFERRED extension** for all ES6 modules
  - Both .js and .mjs are supported in Chrome 136+
  - Files must be properly referenced in manifest.json
  - No remote code execution allowed
  - All code must be bundled with extension
  - **Set `"type": "module"` in package.json** for .js files when needed

### Rule 2: SINGLE CLEAR PROJECT STRUCTURE (NEW - CLEANED UP)

**ONE STRUCTURE ONLY - NO CONFUSION - NO DUPLICATES**

```
chrome-extension-project/
├── src/
│   ├── coding/                    # MAIN FILE TYPE SEPARATION WITH SUBDIRECTORIES
│   │   ├── html/                 # ALL HTML files organized by component
│   │   │   ├── Button/           # Button HTML subdirectory
│   │   │   ├── Modal/            # Modal HTML subdirectory
│   │   │   ├── Options/          # Options HTML subdirectory
│   │   │   ├── Popup/            # Popup HTML subdirectory
│   │   │   └── ...               # Other component HTML subdirectories
│   │   ├── css/                  # ALL CSS files organized by component
│   │   │   ├── Button/           # Button CSS subdirectory
│   │   │   ├── Modal/            # Modal CSS subdirectory
│   │   │   ├── Options/          # Options CSS subdirectory
│   │   │   ├── Popup/            # Popup CSS subdirectory
│   │   │   └── ...               # Other component CSS subdirectories
│   │   ├── javascript/           # ALL JavaScript files organized by component
│   │   │   ├── Button/           # Button JS subdirectory
│   │   │   ├── Modal/            # Modal JS subdirectory
│   │   │   ├── Options/          # Options JS subdirectory
│   │   │   ├── Popup/            # Popup JS subdirectory
│   │   │   └── ...               # Other component JS subdirectories
│   │   ├── logic/                # ALL Logic files organized by component
│   │   │   ├── Button/           # Button logic subdirectory
│   │   │   ├── Modal/            # Modal logic subdirectory
│   │   │   ├── Options/          # Options logic subdirectory
│   │   │   ├── Popup/            # Popup logic subdirectory
│   │   │   └── ...               # Other component logic subdirectories
│   │   ├── functions/            # ALL Function files organized by component
│   │   │   ├── Button/           # Button functions subdirectory
│   │   │   ├── Modal/            # Modal functions subdirectory
│   │   │   ├── Options/          # Options functions subdirectory
│   │   │   ├── Popup/            # Popup functions subdirectory
│   │   │   └── ...               # Other component functions subdirectories
│   │   ├── common/               # ALL Shared/common files
│   │   ├── types/                # ALL Type definitions
│   │   └── constants/            # ALL Constants and configuration
│   ├── components/               # Reusable UI components (Button, Modal, etc.)
│   │   ├── Button/               # Button component directory
│   │   ├── Modal/                # Modal component directory
│   │   ├── Input/                # Input component directory
│   │   └── ...                   # Other component directories
│   ├── hooks/                    # Custom hooks (useAuth, useFetch, etc.)
│   │   ├── useAuth/              # useAuth hook directory
│   │   ├── useFetch/             # useFetch hook directory
│   │   └── ...                   # Other hook directories
│   ├── utils/                    # Utility functions (formatDate, calculateSum, etc.)
│   │   ├── formatDate/           # formatDate utility directory
│   │   ├── calculateSum/         # calculateSum utility directory
│   │   └── ...                   # Other utility directories
│   ├── services/                 # API services and business logic
│   │   ├── apiService/           # apiService directory
│   │   ├── authService/          # authService directory
│   │   └── ...                   # Other service directories
│   ├── context/                  # Context providers (AuthContext, ThemeContext, etc.)
│   │   ├── AuthContext/          # AuthContext directory
│   │   ├── ThemeContext/         # ThemeContext directory
│   │   └── ...                   # Other context directories
│   ├── pages/                    # Page components (Popup, Options, etc.)
│   │   ├── Popup/                # Popup page directory
│   │   ├── Options/              # Options page directory
│   │   └── ...                   # Other page directories
│   ├── background/               # Background service worker
│   ├── content/                  # Content scripts
│   ├── popup/                    # Popup interface
│   ├── options/                  # Options page
│   └── assets/                   # Static assets (icons, images)
├── docs/                         # Professional documentation
├── scripts/                      # Build and deployment scripts
├── config/                       # Configuration files
├── tests/                        # Testing infrastructure
├── .github/                      # GitHub workflows and templates
├── .vscode/                      # VS Code configuration
├── manifest.json                 # Extension manifest (Manifest V3)
├── package.json                  # Project metadata and scripts
└── .cursor/rules/                # Cursor AI rules
```
**DUPLICATE STRUCTURE REMOVED - USE THE SINGLE STRUCTURE ABOVE**
```

### Rule 2.1: SINGLE STRUCTURE SUMMARY (NEW - CLEANED UP)

**ONE STRUCTURE ONLY - NO CONFUSION - NO DUPLICATES**

The structure above is the **ONLY** structure Cursor AI should follow. Here's how it works:

#### File Organization Rules:
1. **ALL HTML files** go to `src/coding/html/ComponentName/`
2. **ALL CSS files** go to `src/coding/css/ComponentName/`
3. **ALL JavaScript files** go to `src/coding/javascript/ComponentName/`
4. **ALL Logic files** go to `src/coding/logic/ComponentName/`
5. **ALL Function files** go to `src/coding/functions/ComponentName/`

#### Component Organization Rules:
1. **Each component** gets its own directory in `src/components/ComponentName/`
2. **Each component** gets its own subdirectories in ALL coding folders
3. **Each component** has its own index.mjs export file
4. **Maximum reusability** - every component can be used anywhere

#### Example: Button Component Creates:
```
src/components/Button/                    # Main component directory
src/coding/html/Button/                  # Button HTML files
src/coding/css/Button/                   # Button CSS files
src/coding/javascript/Button/            # Button JS files
src/coding/logic/Button/                 # Button logic files
src/coding/functions/Button/             # Button function files
```

#### Example: Options Page Creates:
```
src/pages/Options/                       # Main page directory
src/coding/html/Options/                 # Options HTML files
src/coding/css/Options/                  # Options CSS files
src/coding/javascript/Options/           # Options JS files
src/coding/logic/Options/                # Options logic files
src/coding/functions/Options/            # Options function files
```

### Rule 3: Automatic File Organization Enforcement
- **When creating ANY component**: Automatically create separate files for HTML, CSS, JS, Logic, Functions
- **When creating ANY hook**: Automatically create separate files for JS, Logic, Functions
- **When creating ANY utility**: Automatically create separate files for JS, Logic, Functions
- **When creating ANY service**: Automatically create separate files for JS, Logic, Functions
- **When creating ANY context**: Automatically create separate files for JS, Logic, Functions
- **When creating ANY page**: Automatically create separate files for HTML, CSS, JS, Logic, Functions
- **When creating ANY modal**: Automatically create separate files for HTML, CSS, JS, Logic, Functions
- **When creating ANY documentation**: Automatically create appropriate docs/ directory structure
- **When creating ANY scripts**: Automatically create appropriate scripts/ directory structure
- **When creating ANY configuration**: Automatically create appropriate config/ directory structure
- **When creating ANY tests**: Automatically create appropriate tests/ directory structure
- **When creating ANY GitHub workflows**: Automatically create .github/ directory structure
- **When creating ANY VS Code config**: Automatically create .vscode/ directory structure
- **When creating ANY function**: Automatically place in appropriate function directory
- **When creating ANY logic**: Automatically place in appropriate logic directory
- **When creating ANY HTML**: Automatically place in appropriate HTML directory
- **When creating ANY CSS**: Automatically place in appropriate CSS directory

### Rule 4: Chrome Extension Structure Requirements
```
src/
├── background/              # Background service worker
├── content/                 # Content scripts
├── popup/                   # Popup interface
├── options/                 # Options page
├── assets/                  # Static assets (icons, images)
├── components/              # Reusable UI components
├── hooks/                   # Custom hooks
├── utils/                   # Utility functions
├── services/                # API services and business logic
├── context/                 # Context providers
├── pages/                   # Page components
└── manifest.json            # Extension manifest (Manifest V3)
```

## 3. 🚨 **AUTOMATIC STRUCTURE ENFORCEMENT RULES (CRITICAL - 100% COMPLIANCE)**

### Rule 3.1: .mjs FIRST POLICY (NEW - CRITICAL)
- **DEFAULT to .mjs extension** for ALL JavaScript files
- **Use .mjs for ALL ES6 modules** with import/export statements
- **Use .mjs for ALL component files** that will be imported
- **Use .mjs for ALL utility files** that will be imported
- **Use .mjs for ALL service files** that will be imported
- **Use .js ONLY when .mjs is explicitly not allowed**
- **Set `"type": "module"` in package.json** for .js files when needed

#### .mjs File Examples (DEFAULT):
```
✅ CORRECT - Use .mjs by default:
- Button.mjs          # Button component (ES6 module)
- Modal.mjs           # Modal component (ES6 module)
- apiService.mjs      # API service (ES6 module)
- validationUtils.mjs # Validation utilities (ES6 module)
- useAuth.mjs         # Custom hook (ES6 module)
- constants.mjs       # App constants (ES6 module)
```

#### .js File Examples (ONLY when .mjs not allowed):
```
⚠️ ONLY when .mjs is not allowed:
- legacyScript.js     # Legacy system requirement
- buildTool.js        # Build tool constraint
- compatibility.js    # Environment compatibility issue
```

### Rule 5: Automatic Component Creation Enforcement
- **When user says "create Search component"**: Automatically create:
  - `src/components/Search/` directory
  - `src/coding/html/Search.html` file
  - `src/coding/css/Search.css` file
  - `src/coding/javascript/Search.mjs` file
  - `src/coding/logic/Search.logic.mjs` file
  - `src/coding/functions/Search.functions.mjs` file
  - `src/components/Search/index.mjs` export file

- **When user says "create useAuth hook"**: Automatically create:
  - `src/hooks/useAuth/` directory
  - `src/hooks/useAuth/useAuth.mjs` file (ES6 module)
  - `src/hooks/useAuth/index.mjs` export file (ES6 module)

- **When user says "create formatDate utility"**: Automatically create:
  - `src/utils/formatDate/` directory
  - `src/utils/formatDate/formatDate.mjs` file (ES6 module)
  - `src/utils/formatDate/index.mjs` export file (ES6 module)

- **When user says "create apiService service"**: Automatically create:
  - `src/services/apiService/` directory
  - `src/services/apiService/apiService.mjs` file (ES6 module)
  - `src/services/apiService/index.mjs` export file (ES6 module)

- **When user says "create AuthContext context"**: Automatically create:
  - `src/context/AuthContext/` directory
  - `src/context/AuthContext/AuthContext.mjs` file (ES6 module)
  - `src/context/AuthContext/index.mjs` export file (ES6 module)

- **When user says "create Popup page"**: Automatically create:
  - `src/pages/Popup/` directory
  - `src/pages/Popup/popup.html` file
  - `src/pages/Popup/popup.css` file
  - `src/pages/Popup/popup.mjs` file (ES6 module)
  - `src/pages/Popup/index.mjs` export file (ES6 module)

- **When user says "create Modal modal"**: Automatically create:
  - `src/components/Modal/` directory
  - `src/components/Modal/Modal.html` file
  - `src/components/Modal/Modal.css` file
  - `src/components/Modal/Modal.mjs` file (ES6 module)
  - `src/components/Modal/index.mjs` export file (ES6 module)

### Rule 6: Automatic File Placement Enforcement (UPDATED - .mjs FIRST POLICY)
- **HTML files**: ALWAYS go to appropriate component/page directory
- **CSS files**: ALWAYS go to appropriate component/page directory
- **JavaScript files**: **DEFAULT to .mjs extension** and place in appropriate component/page directory
- **Component files**: ALWAYS go to `src/common/components/ComponentName/`
- **Utility files**: ALWAYS go to `src/common/utils/utilityName/`
- **Service files**: ALWAYS go to `src/common/services/serviceName/`
- **Hook files**: ALWAYS go to `src/common/hooks/hookName/`
- **Type files**: ALWAYS go to `src/common/types/`
- **Constant files**: ALWAYS go to `src/common/constants/`

### Rule 7: Automatic Directory Creation Enforcement
- **If directory doesn't exist**: Automatically create it
- **If file type directory missing**: Automatically create it
- **If component directory missing**: Automatically create it
- **Maintain proper hierarchy**: Always follow the established structure

### Rule 8: Chrome Extension File Enforcement
- **manifest.json**: ALWAYS in root directory
- **Background scripts**: ALWAYS in `src/background/`
- **Content scripts**: ALWAYS in `src/content/`
- **Popup files**: ALWAYS in `src/popup/`
- **Options files**: ALWAYS in `src/options/`
- **Asset files**: ALWAYS in `src/assets/`

### Rule 8.1: Professional Infrastructure File Enforcement
- **Documentation files**: ALWAYS in appropriate `docs/` subdirectories
- **Build scripts**: ALWAYS in appropriate `scripts/build/` subdirectories
- **Deployment scripts**: ALWAYS in appropriate `scripts/deploy/` subdirectories
- **Testing scripts**: ALWAYS in appropriate `scripts/test/` subdirectories
- **Configuration files**: ALWAYS in appropriate `config/` subdirectories
- **Test files**: ALWAYS in appropriate `tests/` subdirectories
- **GitHub workflows**: ALWAYS in `.github/workflows/` directory
- **VS Code config**: ALWAYS in `.vscode/` directory
- **Package scripts**: ALWAYS in `package.json` scripts section
- **Environment files**: ALWAYS in root directory with proper naming

## 4. 🚨 **COMPLETE MODULAR STRUCTURE SUMMARY (CRITICAL - 100% COMPLIANCE)**

### Rule 4.1: Package.json Configuration for .mjs First Policy (NEW - CRITICAL)
- **Set `"type": "module"` in package.json** to ensure .js files are treated as ES modules when needed
- **This allows .js files to use import/export syntax** when .mjs is not allowed
- **Maintains ES6 module compatibility** across the entire project
- **Enables modern JavaScript features** in all files

#### Package.json Example:
```json
{
  "name": "chrome-extension-project",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "build": "webpack --mode production",
    "dev": "webpack --mode development --watch"
  },
  "dependencies": {
    // Project dependencies
  }
}
```

#### Benefits of "type": "module":
- **.js files can use ES6 import/export** when .mjs is not allowed
- **Consistent module syntax** across the entire project
- **Modern JavaScript features** available in all files
- **Better tooling support** for ES6 modules
- **Future-proof codebase** with modern standards

### Complete ULTRA-MEGA-MODULAR Chrome Extension Structure
```
chrome-extension-project/
├── src/
│   ├── coding/                    # MAIN FILE TYPE SEPARATION WITH SUBDIRECTORIES
│   │   ├── html/                 # ALL HTML files organized by component
│   │   │   ├── Button/           # Button HTML subdirectory
│   │   │   ├── Modal/            # Modal HTML subdirectory
│   │   │   ├── Options/          # Options HTML subdirectory
│   │   │   ├── Popup/            # Popup HTML subdirectory
│   │   │   └── ...               # Other component HTML subdirectories
│   │   ├── css/                  # ALL CSS files organized by component
│   │   │   ├── Button/           # Button CSS subdirectory
│   │   │   ├── Modal/            # Modal CSS subdirectory
│   │   │   ├── Options/          # Options CSS subdirectory
│   │   │   ├── Popup/            # Popup CSS subdirectory
│   │   │   └── ...               # Other component CSS subdirectories
│   │   ├── javascript/           # ALL JavaScript files organized by component
│   │   │   ├── Button/           # Button JS subdirectory
│   │   │   ├── Modal/            # Modal JS subdirectory
│   │   │   ├── Options/          # Options JS subdirectory
│   │   │   ├── Popup/            # Popup JS subdirectory
│   │   │   └── ...               # Other component JS subdirectories
│   │   ├── logic/                # ALL Logic files organized by component
│   │   │   ├── Button/           # Button logic subdirectory
│   │   │   ├── Modal/            # Modal logic subdirectory
│   │   │   ├── Options/          # Options logic subdirectory
│   │   │   ├── Popup/            # Popup logic subdirectory
│   │   │   └── ...               # Other component logic subdirectories
│   │   ├── functions/            # ALL Function files organized by component
│   │   │   ├── Button/           # Button functions subdirectory
│   │   │   ├── Modal/            # Modal functions subdirectory
│   │   │   ├── Options/          # Options functions subdirectory
│   │   │   ├── Popup/            # Popup functions subdirectory
│   │   │   └── ...               # Other component functions subdirectories
│   │   ├── common/               # ALL Shared/common files
│   │   ├── types/                # ALL Type definitions
│   │   └── constants/            # ALL Constants and configuration
│   ├── components/               # Reusable UI components (Button, Modal, etc.)
│   │   ├── Button/               # Button component directory
│   │   ├── Modal/                # Modal component directory
│   │   ├── Input/                # Input component directory
│   │   └── ...                   # Other component directories
│   ├── hooks/                    # Custom hooks (useAuth, useFetch, etc.)
│   │   ├── useAuth/              # useAuth hook directory
│   │   ├── useFetch/             # useFetch hook directory
│   │   └── ...                   # Other hook directories
│   ├── utils/                    # Utility functions (formatDate, calculateSum, etc.)
│   │   ├── formatDate/           # formatDate utility directory
│   │   ├── calculateSum/         # calculateSum utility directory
│   │   └── ...                   # Other utility directories
│   ├── services/                 # API services and business logic
│   │   ├── apiService/           # apiService directory
│   │   ├── authService/          # authService directory
│   │   └── ...                   # Other service directories
│   ├── context/                  # Context providers (AuthContext, ThemeContext, etc.)
│   │   ├── AuthContext/          # AuthContext directory
│   │   ├── ThemeContext/         # ThemeContext directory
│   │   └── ...                   # Other context directories
│   ├── pages/                    # Page components (Popup, Options, etc.)
│   │   ├── Popup/                # Popup page directory
│   │   ├── Options/              # Options page directory
│   │   └── ...                   # Other page directories
│   ├── background/               # Background service worker
│   ├── content/                  # Content scripts
│   ├── popup/                    # Popup interface
│   ├── options/                  # Options page
│   └── assets/                   # Static assets (icons, images)
├── docs/                         # Professional documentation
│   ├── api/                      # API documentation
│   ├── components/               # Component documentation
│   ├── deployment/               # Deployment guides
│   ├── development/              # Development guides
│   ├── architecture/             # Architecture documentation
│   └── user-guides/              # User guides and tutorials
├── scripts/                      # Build and deployment scripts
│   ├── build/                    # Build scripts
│   ├── deploy/                   # Deployment scripts
│   ├── test/                     # Testing scripts
│   └── utils/                    # Script utilities
├── config/                       # Configuration files
│   ├── webpack/                  # Webpack configuration
│   ├── babel/                    # Babel configuration
│   ├── eslint/                   # ESLint configuration
│   ├── prettier/                 # Prettier configuration
│   └── javascript/               # JavaScript configuration
├── tests/                        # Testing infrastructure
│   ├── unit/                     # Unit tests
│   ├── integration/              # Integration tests
│   ├── e2e/                      # End-to-end tests
│   └── fixtures/                 # Test fixtures and mocks
├── .github/                      # GitHub workflows and templates
│   ├── workflows/                # CI/CD workflows
│   ├── ISSUE_TEMPLATE/           # Issue templates
│   └── PULL_REQUEST_TEMPLATE.md  # PR template
├── .vscode/                      # VS Code configuration
│   ├── extensions.json            # Recommended extensions
│   ├── settings.json             # Workspace settings
│   └── launch.json               # Debug configuration
├── manifest.json                 # Extension manifest (Manifest V3)
├── package.json                  # Project metadata and scripts
├── jsconfig.json                  # JavaScript configuration
├── webpack.config.js             # Webpack build configuration
├── .eslintrc.js                  # ESLint configuration
├── .prettierrc                   # Prettier configuration
├── .gitignore                    # Git ignore patterns
├── .env.example                  # Environment variables template
├── README.md                     # Project overview and setup
├── CHANGELOG.md                  # Version history and changes
├── CONTRIBUTING.md               # Contribution guidelines
├── LICENSE                       # Project license
└── .cursor/rules/                # Cursor AI rules
```

### Automatic Creation Examples
- **"create Button component"** → Creates Button directory + HTML/CSS/JS/Logic/Functions files
- **"create Modal component"** → Creates Modal directory + HTML/CSS/MJS/Logic/Functions files (ES6 modules)
- **"create useAuth hook"** → Creates useAuth directory + JS/Logic/Functions files (regular scripts)
- **"create useFetch hook"** → Creates useFetch directory + MJS/Logic/Functions files (ES6 modules)
- **"create formatDate utility"** → Creates formatDate directory + JS/Logic/Functions files (regular scripts)
- **"create apiService service"** → Creates apiService directory + MJS/Logic/Functions files (ES6 modules)
- **"create AuthContext context"** → Creates AuthContext directory + MJS/Logic/Functions files (ES6 modules)
- **"create Popup page"** → Creates Popup directory + HTML/CSS/JS/Logic/Functions files (regular scripts)
- **"create Options page"** → Creates Options directory + HTML/CSS/MJS/Logic/Functions files (ES6 modules)

- **"create API documentation"** → Creates docs/api/ structure + documentation files
- **"create component docs"** → Creates docs/components/ structure + documentation files
- **"create deployment guide"** → Creates docs/deployment/ structure + deployment guides
- **"create development guide"** → Creates docs/development/ structure + development guides
- **"create architecture docs"** → Creates docs/architecture/ structure + architecture documentation
- **"create user guides"** → Creates docs/user-guides/ structure + user guides
- **"create build scripts"** → Creates scripts/build/ structure + build scripts
- **"create deployment scripts"** → Creates scripts/deploy/ structure + deployment scripts
- **"create testing scripts"** → Creates scripts/test/ structure + testing scripts
- **"create webpack config"** → Creates config/webpack/ structure + webpack configuration
- **"create babel config"** → Creates config/babel/ structure + babel configuration
- **"create eslint config"** → Creates config/eslint/ structure + eslint configuration
- **"create prettier config"** → Creates config/prettier/ structure + prettier configuration
- **"create typescript config"** → Creates config/typescript/ structure + typescript configuration
- **"create unit tests"** → Creates tests/unit/ structure + unit test files
- **"create integration tests"** → Creates tests/integration/ structure + integration test files
- **"create e2e tests"** → Creates tests/e2e/ structure + end-to-end test files
- **"create GitHub workflows"** → Creates .github/workflows/ structure + CI/CD workflows
- **"create VS Code config"** → Creates .vscode/ structure + VS Code configuration

### Rule 5.1: Professional Infrastructure Creation Enforcement
- **When user says "create API documentation"**: Automatically create:
  - `docs/api/` directory
  - `docs/api/README.md` file
  - `docs/api/endpoints.md` file
  - `docs/api/examples.md` file

- **When user says "create build scripts"**: Automatically create:
  - `scripts/build/` directory
  - `scripts/build/build.js` file
  - `scripts/build/build.prod.js` file
  - `scripts/build/build.dev.js` file

- **When user says "create deployment scripts"**: Automatically create:
  - `scripts/deploy/` directory
  - `scripts/deploy/deploy.js` file
  - `scripts/deploy/deploy.prod.js` file
  - `scripts/deploy/deploy.dev.js` file

- **When user says "create webpack config"**: Automatically create:
  - `config/webpack/` directory
  - `config/webpack/webpack.common.js` file
  - `config/webpack/webpack.dev.js` file
  - `config/webpack/webpack.prod.js` file

- **When user says "create unit tests"**: Automatically create:
  - `tests/unit/` directory
  - `tests/unit/setup.js` file
  - `tests/unit/helpers.js` file
  - `tests/unit/index.js` file

- **When user says "create GitHub workflows"**: Automatically create:
  - `.github/workflows/` directory
  - `.github/workflows/ci.yml` file
  - `.github/workflows/deploy.yml` file
  - `.github/workflows/release.yml` file

## 6. 🚨 **FINAL STRUCTURE ENFORCEMENT RULES (CRITICAL - 100% COMPLIANCE)**

### Rule 9: Mandatory Structure Compliance
- **NEVER create files outside designated directories**
- **NEVER mix file types in single directories**
- **NEVER skip component directory creation**
- **ALWAYS follow the established structure exactly**
- **ALWAYS create all required files for components**

### Rule 10: Automatic Structure Validation
- **Before creating any file**: Search for existing similar functionality
- **Before creating any component**: Check if it exists in common
- **Before creating any function**: Check if similar function exists
- **After any creation**: Verify no duplication exists
- **NEVER create duplicate functionality** - this is a ZERO TOLERANCE RULE

### Rule 11: COMMON CODE VIOLATION PREVENTION (NEW - CRITICAL)
- **If code duplication detected**: STOP and remove duplicate immediately
- **If common code skipped**: Check common code first before creating new
- **If duplicate functionality**: Move to common and reuse everywhere
- **If structure broken**: Restore proper common code organization

## 5. Code Generation Rules (CRITICAL - 100% Compliance)

### Preventing Complete File Rewrites

#### When Complete Rewrites Are NOT Allowed
- **Existing files** - never rewrite entire files unless specifically requested
- **Working code** - preserve existing functionality and only modify what's needed
- **Large files** - break changes into smaller, focused modifications
- **Production code** - maintain stability and only change what's necessary

#### Incremental Change Strategy
- **Identify specific lines** that need modification
- **Use Cursor AI editor** for targeted changes
- **Preserve context** around modified sections
- **Add new code** without removing working existing code
- **Document changes** clearly for future reference

#### Implementation Guidelines
- **For new features**: Show only the new code to add
- **For modifications**: Use `// ... existing code ...` to indicate unchanged parts
- **For deletions**: Clearly mark what to remove
- **For file creation**: Provide minimal boilerplate + specific additions

#### Response Format Examples
```typescript
// Add this function to the existing class
public newMethod(): void {
    // Implementation here
}

// ... existing code ...

// Replace this line
- oldCode();
+ newCode();
```

#### Benefits
- **Eliminates token waste** from unnecessary code
- **Prevents network timeouts** and errors
- **Improves response clarity** and focus
- **Enables faster iteration** and development
- **Reduces confusion** about what actually changed

## 3. 🚨 **NEW CRITICAL ENFORCEMENT RULES**

### Rule 5: File Size Detection
- **Before making changes**: Check file size and line count
- **If file > 100 lines**: Use incremental changes only
- **If file > 500 lines**: Break into multiple small changes
- **If file > 1000 lines**: Use Cursor AI editor with incremental changes only

### Rule 6: Change Scope Limitation
- **Maximum change scope**: 50 lines per change
- **Multiple changes**: Break into separate operations
- **Large modifications**: Use iterative approach
- **File rewrites**: NEVER allowed without explicit permission

### Rule 7: Context Preservation
- **Show surrounding context**: 2-3 lines before and after changes
- **Use line numbers**: Reference specific line numbers for changes
- **Maintain file structure**: Don't break existing organization
- **Preserve imports**: Keep all existing import statements

### Rule 8: Change Documentation
- **Document every change**: What was changed and why
- **Use clear markers**: `// ADD:`, `// REPLACE:`, `// REMOVE:`
- **Reference line numbers**: Always specify where changes go
- **Explain purpose**: Why the change is needed

## 4. 🚨 **ANTI-REWRITE ENFORCEMENT MECHANISMS**

### Mechanism 1: File Existence Check
```bash
# ALWAYS check if file exists before suggesting changes
if [ -f "filename.mjs" ]; then
    echo "File exists - use incremental changes only"
    echo "NEVER rewrite entire file"
else
    echo "New file - provide minimal boilerplate + specific additions"
fi
```

### Mechanism 2: Change Size Validation
```bash
# Validate change size before applying
change_lines=$(echo "$proposed_change" | wc -l)
if [ "$change_lines" -gt 50 ]; then
    echo "Change too large - break into smaller parts"
    echo "Maximum allowed: 50 lines per change"
fi
```

### Mechanism 3: File Rewrite Prevention
```bash
# Prevent file rewrites
if [[ "$proposed_change" == *"entire file"* ]] || [[ "$proposed_change" == *"complete rewrite"* ]]; then
    echo "🚨 FILE REWRITE DETECTED - STOP IMMEDIATELY"
    echo "Use incremental changes only"
    exit 1
fi
```

## 5. 🚨 **MINIMAL CHANGE EXAMPLES**

### Example 1: Adding a Function
```javascript
// ADD: New function after line 45
// ... existing code ...

/**
 * Validates user input data
 * @param {Object} data - User input data
 * @returns {boolean} - Validation result
 */
function validateUserData(data) {
    return data && typeof data === 'object' && data.name && data.email;
}

// ... existing code ...
```

### Example 2: Modifying Existing Code
```javascript
// REPLACE: Lines 23-25
- const oldValidation = checkData(userInput);
- if (oldValidation) {
-     processData(userInput);
+ const isValid = validateUserData(userInput);
+ if (isValid) {
+     processUserData(userInput);
```

### Example 3: Adding Import Statement
```javascript
// ADD: Import statement at line 3
import { validateUserData } from './validation.mjs';
// ... existing code ...
```

### Example 4: Removing Code
```javascript
// REMOVE: Lines 67-70 (deprecated function)
- /**
-  * @deprecated Use validateUserData instead
-  */
- function oldValidation() {
-     // Deprecated implementation
- }
```

## 6. 🚨 **RULE VIOLATION PENALTIES (ENFORCED)**

### Penalties for File Rewrites
- **File Rewrite Violation**: If Cursor AI rewrites entire files
  - **Penalty**: Must immediately stop and use incremental changes
  - **Verification**: Must prove only specific lines were changed
  - **Documentation**: Must document the violation and correction

### Penalties for Large Changes
- **Large Change Violation**: If Cursor AI makes changes > 50 lines
  - **Penalty**: Must break into smaller, focused changes
  - **Verification**: Must prove changes are under 50 lines each
  - **Documentation**: Must document the violation and correction

### Penalties for Context Loss
- **Context Loss Violation**: If Cursor AI loses file context
  - **Penalty**: Must reread file and regain context
  - **Verification**: Must prove context understanding
  - **Documentation**: Must document the violation and correction

## 7. 🚨 **RULE TESTING MECHANISM**

### Test 1: File Rewrite Prevention
```bash
echo "🎯 TESTING FILE REWRITE PREVENTION..."
echo "If Cursor AI rewrites entire files, rule violation detected"
echo "Expected: Only specific changes shown"
echo "Actual: Check response for complete file content"
```

### Test 2: Change Size Validation
```bash
echo "🎯 TESTING CHANGE SIZE VALIDATION..."
echo "If Cursor AI shows changes > 50 lines, rule violation detected"
echo "Expected: Changes under 50 lines each"
echo "Actual: Count lines in proposed changes"
```

### Test 3: Context Preservation
```bash
echo "🎯 TESTING CONTEXT PRESERVATION..."
echo "If Cursor AI loses file context, rule violation detected"
echo "Expected: Clear reference to existing code structure"
echo "Actual: Check for context markers and line numbers"
```

## 8. 🚨 **EMERGENCY PROCEDURES**

### If File Rewrite is Detected
1. **STOP immediately** - don't continue with rewrite
2. **Switch to incremental changes** - show only what needs to change
3. **Use Cursor AI editor** - target specific lines only
4. **Preserve existing code** - don't remove working functionality
5. **Document the violation** - record what went wrong

### If Large Changes are Detected
1. **Break into smaller parts** - maximum 50 lines per change
2. **Use iterative approach** - one change at a time
3. **Maintain context** - show surrounding code for each change
4. **Verify each change** - ensure it's focused and specific
5. **Document the process** - explain how changes were broken down

### If Context is Lost
1. **Reread the file** - regain understanding of structure
2. **Use line numbers** - reference specific locations
3. **Show surrounding code** - provide context for changes
4. **Explain relationships** - how changes fit into existing code
5. **Verify understanding** - confirm context is restored

## 9. Benefits of Minimal Change Approach

### Performance Benefits
- **Faster response times** - no unnecessary code generation
- **Reduced token usage** - focus on what actually needs to change
- **Better network performance** - smaller responses, fewer timeouts
- **Improved reliability** - less chance of generation errors

### Development Benefits
- **Clearer changes** - easy to see what was modified
- **Better version control** - focused commits with clear purposes
- **Easier debugging** - changes are isolated and specific
- **Faster iteration** - quick changes without full file processing

### Maintenance Benefits
- **Preserved functionality** - existing code remains intact
- **Reduced risk** - smaller changes are less likely to break things
- **Better documentation** - clear record of what changed and why
- **Easier rollback** - specific changes can be undone individually

## 10. Implementation Checklist

### Before Making Any Changes
- [ ] **File exists check** - is this a new file or existing file?
- [ ] **File size assessment** - how many lines does the file have?
- [ ] **Change scope planning** - what specific lines need modification?
- [ ] **Context understanding** - what surrounds the areas to change?
- [ ] **Incremental approach** - can this be broken into smaller changes?

### During Change Implementation
- [ ] **Use specific line numbers** - reference exact locations
- [ ] **Show surrounding context** - 2-3 lines before and after
- [ ] **Use clear markers** - ADD, REPLACE, REMOVE
- [ ] **Preserve existing code** - don't remove unless explicitly told
- [ ] **Document changes** - explain what and why

### After Change Implementation
- [ ] **Verify change size** - ensure under 50 lines
- [ ] **Check context preservation** - ensure surrounding code intact
- [ ] **Document violations** - if any rules were broken
- [ ] **Provide rollback info** - how to undo if needed
- [ ] **Confirm completion** - verify all requested changes made

## 11. 🚨 **STRICT COMMON CODE PENALTY ENFORCEMENT (NEW - CRITICAL)**

### Penalty Levels (ESCALATING)
- **First Violation**: Warning + immediate correction required
- **Second Violation**: 24-hour suspension from code generation operations
- **Third Violation**: Complete task restart with user supervision
- **Fourth Violation**: User must manually approve all future code generation operations

### **🚨 MANDATORY COMMON CODE RULES (NON-NEGOTIABLE)**

#### **Rule 1: Code Duplication Prevention (100% COMPLIANCE)**
- **BEFORE adding ANY new code**: Search entire project for similar functionality
- **If similar code exists**: Move it to common location and reuse
- **If no similar code**: Create in common location for future reuse
- **NEVER create duplicate functionality** - this is a **ZERO TOLERANCE RULE**

#### **Rule 2: Common Code Organization (100% COMPLIANCE)**
- **ALL shared code** goes in `src/common/` directory
- **ALL reusable components** go in `src/common/components/`
- **ALL utility functions** go in `src/common/utils/`
- **ALL business logic** goes in `src/common/services/`
- **ALL shared styles** go in `src/common/styles/`

#### **Rule 3: Code Reuse Verification (100% COMPLIANCE)**
- **Before implementing ANY feature**: Check common code first
- **Before creating ANY component**: Check if it exists in common
- **Before writing ANY function**: Check if similar function exists
- **Always import from common** instead of creating new

### Specific Penalties for Each Violation Type

#### **Code Duplication Violation Penalties (NEW - CRITICAL)**
- **Immediate Action**: STOP all code generation operations
- **Required Correction**: Remove duplicate code immediately
- **Verification**: Must prove no duplication exists
- **Documentation**: Must document violation and correction
- **User Notification**: Alert user immediately of violation

#### **Common Code Skipping Violation Penalties (NEW - CRITICAL)**
- **Immediate Action**: STOP all code generation operations
- **Required Correction**: Check common code first before creating new
- **Verification**: Must prove common code was checked
- **Documentation**: Must document violation and correction
- **User Notification**: Alert user immediately of violation

#### Project Structure Violation Penalties
- **Immediate Action**: STOP all code generation operations
- **Required Correction**: Follow single clear structure immediately
- **Verification**: Must prove correct project structure
- **Documentation**: Must document violation and correction
- **User Notification**: Alert user immediately of violation

#### File Organization Violation Penalties
- **Immediate Action**: STOP all file operations
- **Required Correction**: Organize files correctly immediately
- **Verification**: Must prove proper file organization
- **Documentation**: Must document violation and correction
- **Organization Audit**: Must audit all file organization

#### Component Creation Violation Penalties
- **Immediate Action**: STOP all component operations
- **Required Correction**: Create components with proper structure immediately
- **Verification**: Must prove proper component structure
- **Documentation**: Must document violation and correction
- **Component Audit**: Must audit all component creation

### Penalty Enforcement Commands
```bash
# Penalty enforcement verification
echo "🚨 COMMON CODE PENALTY ENFORCEMENT VERIFICATION"
echo "Checking for common code violations..."

# Check for code duplication
if grep -q "duplicate.*code\|same.*functionality\|copy.*paste" task_execution.log; then
    echo "🚨 CODE DUPLICATION VIOLATION DETECTED"
    echo "Penalty: Immediate code generation suspension"
    echo "Required: Remove duplicate code immediately"
fi

# Check for common code skipping
if grep -q "create.*new.*component\|write.*new.*function" task_execution.log | grep -v "check.*common.*first"; then
    echo "🚨 COMMON CODE SKIPPING VIOLATION DETECTED"
    echo "Penalty: Immediate code generation suspension"
    echo "Required: Check common code first before creating new"
fi

# Check for wrong project structure
if grep -q "wrong.*structure\|incorrect.*organization" task_execution.log | grep -v "correct.*structure"; then
    echo "🚨 PROJECT STRUCTURE VIOLATION DETECTED"
    echo "Penalty: Immediate code generation suspension"
    echo "Required: Follow single clear structure"
fi

# Check for wrong file organization
if grep -q "wrong.*directory\|incorrect.*placement" task_execution.log | grep -v "correct.*organization"; then
    echo "🚨 FILE ORGANIZATION VIOLATION DETECTED"
    echo "Penalty: Immediate file operation suspension"
    echo "Required: Organize files correctly"
fi

# Check for wrong component creation
if grep -q "missing.*component.*structure\|incomplete.*component" task_execution.log | grep -v "proper.*component.*structure"; then
    echo "🚨 COMPONENT CREATION VIOLATION DETECTED"
    echo "Penalty: Immediate component operation suspension"
    echo "Required: Create components with proper structure"
fi
```

### Emergency Penalty Procedures
1. **Immediate Violation Detection**: Stop all code generation operations
2. **User Notification**: Alert user of violation immediately
3. **Penalty Application**: Apply appropriate penalty level
4. **Correction Required**: Must correct violation before continuing
5. **Verification**: Must prove correction was successful
6. **Documentation**: Must document violation and correction
7. **User Approval**: Must get user approval to resume

## Conclusion

These strengthened code generation rules ensure that Cursor AI NEVER rewrites entire files, ALWAYS uses minimal, incremental changes, NEVER creates duplicate code, and **DEFAULTS to .mjs extension** for all JavaScript files. The new **strict common code organization** prevents code duplication and enforces maximum reusability through a simple, professional structure with **.mjs first policy**.

**Remember: NEVER rewrite files, NEVER duplicate code, ALWAYS check common first, reuse existing code always, and DEFAULT to .mjs for all JavaScript files!**

## Rule Verification Status

- **File rewrite prevention**: ✅ ENFORCED
- **Change size limits**: ✅ ENFORCED  
- **Context preservation**: ✅ ENFORCED
- **Incremental approach**: ✅ ENFORCED
- **Code duplication prevention**: ✅ ENFORCED
- **Common code organization**: ✅ ENFORCED
- **.mjs first policy**: ✅ ENFORCED
- **Rule violations**: ✅ PENALIZED

**Status: ALL ANTI-REWRITE, COMMON CODE, AND .MJS FIRST RULES ACTIVE - FILE REWRITES, CODE DUPLICATION PREVENTED, AND .MJS EXTENSIONS ENFORCED**


These code generation and project structure rules ensure that Cursor AI creates maintainable, reusable code with proper organization and no duplication. The strict project structure and import strategy maximize reusability and maintainability.

**Remember: No mixed concerns, no code duplication, proper file extensions always!**
