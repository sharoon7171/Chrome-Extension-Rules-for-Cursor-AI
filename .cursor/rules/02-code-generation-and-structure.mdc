---
description: Code generation rules, coding style standards, professional project structure, and anti-duplication guidelines with .mjs module support
globs: ['**/*']
alwaysApply: true
---

# Code Generation and Project Structure Rules

## ðŸš¨ **CRITICAL RULE: NEVER REWRITE ENTIRE FILES (100% COMPLIANCE)**

### Core Principle
- **NEVER write complete code files** unless explicitly requested
- **ONLY provide necessary changes** or additions to existing code
- **Focus on specific modifications** rather than full file rewrites
- **STRICT professional modular project structure** with mandatory separation of concerns
- **Support .mjs file extensions** for ES6+ modules and modern JavaScript syntax

## 1. ðŸš¨ **MANDATORY MINIMAL CHANGE RULES (CRITICAL - 100% COMPLIANCE)**

### Rule 1: NEVER Rewrite Existing Files
- **EXISTING FILES ARE OFF-LIMITS** for complete rewrites
- **ONLY modify specific lines** that need changes
- **PRESERVE ALL existing code** unless explicitly told to remove
- **USE Cursor AI editor** for targeted modifications
- **SHOW ONLY what needs to change** - never the entire file

### Rule 2: Mandatory Change Format
```
// ONLY show the specific change needed:

// Add this function after line 45:
function newFunction() {
    // Implementation here
}

// OR

// Replace line 23:
- oldCode();
+ newCode();

// OR

// Insert after line 67:
// ... existing code ...
newCode();
// ... existing code ...
```

### Rule 3: File Rewrite Prevention
- **If file exists**: ONLY show changes, never rewrite
- **If file is new**: Provide minimal boilerplate + specific additions
- **If file is large**: Break into smaller, focused modifications
- **If file is complex**: Use incremental approach, one change at a time

### Rule 4: Token Efficiency Enforcement
- **Prevent token overflow** by showing minimal changes
- **Avoid network timeouts** from unnecessary code generation
- **Focus on specific functionality** rather than complete rewrites
- **Maintain context** across task segments

## 2. ðŸš¨ **MANDATORY MODULAR PROJECT STRUCTURE ENFORCEMENT (CRITICAL - 100% COMPLIANCE)**

### Core Principle
- **STRICT modular project structure** with mandatory separation of concerns
- **EVERY component gets its own directory** with separate files for each concern
- **File type separation** - HTML, CSS, JavaScript, Logic, Functions in separate directories
- **Component separation** - Each component maintains its own organization
- **Professional Chrome extension structure** - follow Manifest V3 best practices

### Rule 1: Mandatory File Type Separation
```
src/
â”œâ”€â”€ coding/                    # MAIN FILE TYPE SEPARATION
â”‚   â”œâ”€â”€ html/                 # ALL HTML files from all components
â”‚   â”œâ”€â”€ css/                  # ALL CSS files from all components
â”‚   â”œâ”€â”€ javascript/           # ALL JavaScript files from all components
â”‚   â”œâ”€â”€ logic/                # ALL Business logic files from all components
â”‚   â”œâ”€â”€ functions/            # ALL Utility functions from all components
â”‚   â”œâ”€â”€ common/               # ALL Shared/common files
â”‚   â”œâ”€â”€ types/                # ALL Type definitions
â”‚   â””â”€â”€ constants/            # ALL Constants and configuration
```

### Rule 2: Mandatory Component Separation
```
src/
â”œâ”€â”€ components/               # COMPONENT SEPARATION
â”‚   â”œâ”€â”€ Search/              # Search component directory
â”‚   â”‚   â”œâ”€â”€ Search.html      # Goes to coding/html/
â”‚   â”‚   â”œâ”€â”€ Search.css       # Goes to coding/css/
â”‚   â”‚   â”œâ”€â”€ Search.js        # Goes to coding/javascript/
â”‚   â”‚   â”œâ”€â”€ Search.logic.js  # Goes to coding/logic/
â”‚   â”‚   â”œâ”€â”€ Search.functions.js # Goes to coding/functions/
â”‚   â”‚   â””â”€â”€ index.js         # Export file
â”‚   â”œâ”€â”€ Flex/                # Flex component directory
â”‚   â””â”€â”€ Radio/               # Radio component directory
```

### Rule 2.1: Complete Modular Directory Structure
```
src/
â”œâ”€â”€ components/               # Reusable UI components
â”‚   â”œâ”€â”€ Button/
â”‚   â”‚   â”œâ”€â”€ Button.html      # Goes to coding/html/
â”‚   â”‚   â”œâ”€â”€ Button.css       # Goes to coding/css/
â”‚   â”‚   â”œâ”€â”€ Button.js        # Goes to coding/javascript/
â”‚   â”‚   â”œâ”€â”€ Button.logic.js  # Goes to coding/logic/
â”‚   â”‚   â”œâ”€â”€ Button.functions.js # Goes to coding/functions/
â”‚   â”‚   â””â”€â”€ index.js         # Export file
â”‚   â”œâ”€â”€ Modal/
â”‚   â”‚   â”œâ”€â”€ Modal.html       # Goes to coding/html/
â”‚   â”‚   â”œâ”€â”€ Modal.css        # Goes to coding/css/
â”‚   â”‚   â”œâ”€â”€ Modal.js         # Goes to coding/javascript/
â”‚   â”‚   â”œâ”€â”€ Modal.logic.js   # Goes to coding/logic/
â”‚   â”‚   â”œâ”€â”€ Modal.functions.js # Goes to coding/functions/
â”‚   â”‚   â””â”€â”€ index.js         # Export file
â”‚   â””â”€â”€ ...                  # Other components
â”œâ”€â”€ hooks/                    # Custom hooks (React-style organization)
â”‚   â”œâ”€â”€ useAuth/
â”‚   â”‚   â”œâ”€â”€ useAuth.js       # Goes to coding/javascript/
â”‚   â”‚   â”œâ”€â”€ useAuth.logic.js # Goes to coding/logic/
â”‚   â”‚   â”œâ”€â”€ useAuth.functions.js # Goes to coding/functions/
â”‚   â”‚   â””â”€â”€ index.js         # Export file
â”‚   â”œâ”€â”€ useFetch/
â”‚   â”‚   â”œâ”€â”€ useFetch.js      # Goes to coding/javascript/
â”‚   â”‚   â”œâ”€â”€ useFetch.logic.js # Goes to coding/logic/
â”‚   â”‚   â”œâ”€â”€ useFetch.functions.js # Goes to coding/functions/
â”‚   â”‚   â””â”€â”€ index.js         # Export file
â”‚   â””â”€â”€ ...                  # Other hooks
â”œâ”€â”€ utils/                    # Utility functions
â”‚   â”œâ”€â”€ formatDate/
â”‚   â”‚   â”œâ”€â”€ formatDate.js    # Goes to coding/javascript/
â”‚   â”‚   â”œâ”€â”€ formatDate.logic.js # Goes to coding/logic/
â”‚   â”‚   â”œâ”€â”€ formatDate.functions.js # Goes to coding/functions/
â”‚   â”‚   â””â”€â”€ index.js         # Export file
â”‚   â”œâ”€â”€ calculateSum/
â”‚   â”‚   â”œâ”€â”€ calculateSum.js  # Goes to coding/javascript/
â”‚   â”‚   â”œâ”€â”€ calculateSum.logic.js # Goes to coding/logic/
â”‚   â”‚   â”œâ”€â”€ calculateSum.functions.js # Goes to coding/functions/
â”‚   â”‚   â””â”€â”€ index.js         # Export file
â”‚   â””â”€â”€ ...                  # Other utilities
â”œâ”€â”€ services/                 # API services and business logic
â”‚   â”œâ”€â”€ apiService/
â”‚   â”‚   â”œâ”€â”€ apiService.js    # Goes to coding/javascript/
â”‚   â”‚   â”œâ”€â”€ apiService.logic.js # Goes to coding/logic/
â”‚   â”‚   â”œâ”€â”€ apiService.functions.js # Goes to coding/functions/
â”‚   â”‚   â””â”€â”€ index.js         # Export file
â”‚   â”œâ”€â”€ authService/
â”‚   â”‚   â”œâ”€â”€ authService.js   # Goes to coding/javascript/
â”‚   â”‚   â”œâ”€â”€ authService.logic.js # Goes to coding/logic/
â”‚   â”‚   â”œâ”€â”€ authService.functions.js # Goes to coding/functions/
â”‚   â”‚   â””â”€â”€ index.js         # Export file
â”‚   â””â”€â”€ ...                  # Other services
â”œâ”€â”€ context/                  # Context providers (React-style organization)
â”‚   â”œâ”€â”€ AuthContext/
â”‚   â”‚   â”œâ”€â”€ AuthContext.js   # Goes to coding/javascript/
â”‚   â”‚   â”œâ”€â”€ AuthContext.logic.js # Goes to coding/logic/
â”‚   â”‚   â”œâ”€â”€ AuthContext.functions.js # Goes to coding/functions/
â”‚   â”‚   â””â”€â”€ index.js         # Export file
â”‚   â”œâ”€â”€ ThemeContext/
â”‚   â”‚   â”œâ”€â”€ ThemeContext.js  # Goes to coding/javascript/
â”‚   â”‚   â”œâ”€â”€ ThemeContext.logic.js # Goes to coding/logic/
â”‚   â”‚   â”œâ”€â”€ ThemeContext.functions.js # Goes to coding/functions/
â”‚   â”‚   â””â”€â”€ index.js         # Export file
â”‚   â””â”€â”€ ...                  # Other contexts
â”œâ”€â”€ pages/                    # Page components
â”‚   â”œâ”€â”€ Popup/
â”‚   â”‚   â”œâ”€â”€ Popup.html       # Goes to coding/html/
â”‚   â”‚   â”œâ”€â”€ Popup.css        # Goes to coding/css/
â”‚   â”‚   â”œâ”€â”€ Popup.js         # Goes to coding/javascript/
â”‚   â”‚   â”œâ”€â”€ Popup.logic.js   # Goes to coding/logic/
â”‚   â”‚   â”œâ”€â”€ Popup.functions.js # Goes to coding/functions/
â”‚   â”‚   â””â”€â”€ index.js         # Export file
â”‚   â”œâ”€â”€ Options/
â”‚   â”‚   â”œâ”€â”€ Options.html     # Goes to coding/html/
â”‚   â”‚   â”œâ”€â”€ Options.css      # Goes to coding/css/
â”‚   â”‚   â”œâ”€â”€ Options.js       # Goes to coding/javascript/
â”‚   â”‚   â”œâ”€â”€ Options.logic.js # Goes to coding/logic/
â”‚   â”‚   â”œâ”€â”€ Options.functions.js # Goes to coding/functions/
â”‚   â”‚   â””â”€â”€ index.js         # Export file
â”‚   â””â”€â”€ ...                  # Other pages
```

### Rule 3: Automatic File Organization Enforcement
- **When creating ANY component**: Automatically create separate files for HTML, CSS, JS, Logic, Functions
- **When creating ANY hook**: Automatically create separate files for JS, Logic, Functions
- **When creating ANY utility**: Automatically create separate files for JS, Logic, Functions
- **When creating ANY service**: Automatically create separate files for JS, Logic, Functions
- **When creating ANY context**: Automatically create separate files for JS, Logic, Functions
- **When creating ANY page**: Automatically create separate files for HTML, CSS, JS, Logic, Functions
- **When creating ANY modal**: Automatically create separate files for HTML, CSS, JS, Logic, Functions
- **When creating ANY function**: Automatically place in appropriate function directory
- **When creating ANY logic**: Automatically place in appropriate logic directory
- **When creating ANY HTML**: Automatically place in appropriate HTML directory
- **When creating ANY CSS**: Automatically place in appropriate CSS directory

### Rule 4: Chrome Extension Structure Requirements
```
src/
â”œâ”€â”€ background/              # Background service worker
â”œâ”€â”€ content/                 # Content scripts
â”œâ”€â”€ popup/                   # Popup interface
â”œâ”€â”€ options/                 # Options page
â”œâ”€â”€ assets/                  # Static assets (icons, images)
â”œâ”€â”€ components/              # Reusable UI components
â”œâ”€â”€ hooks/                   # Custom hooks
â”œâ”€â”€ utils/                   # Utility functions
â”œâ”€â”€ services/                # API services and business logic
â”œâ”€â”€ context/                 # Context providers
â”œâ”€â”€ pages/                   # Page components
â””â”€â”€ manifest.json            # Extension manifest (Manifest V3)
```

## 3. ðŸš¨ **AUTOMATIC STRUCTURE ENFORCEMENT RULES (CRITICAL - 100% COMPLIANCE)**

### Rule 5: Automatic Component Creation Enforcement
- **When user says "create Search component"**: Automatically create:
  - `src/components/Search/` directory
  - `src/coding/html/Search.html` file
  - `src/coding/css/Search.css` file
  - `src/coding/javascript/Search.js` file
  - `src/coding/logic/Search.logic.js` file
  - `src/coding/functions/Search.functions.js` file
  - `src/components/Search/index.js` export file

- **When user says "create useAuth hook"**: Automatically create:
  - `src/hooks/useAuth/` directory
  - `src/coding/javascript/useAuth.js` file
  - `src/coding/logic/useAuth.logic.js` file
  - `src/coding/functions/useAuth.functions.js` file
  - `src/hooks/useAuth/index.js` export file

- **When user says "create formatDate utility"**: Automatically create:
  - `src/utils/formatDate/` directory
  - `src/coding/javascript/formatDate.js` file
  - `src/coding/logic/formatDate.logic.js` file
  - `src/coding/functions/formatDate.functions.js` file
  - `src/utils/formatDate/index.js` export file

- **When user says "create apiService service"**: Automatically create:
  - `src/services/apiService/` directory
  - `src/coding/javascript/apiService.js` file
  - `src/coding/logic/apiService.logic.js` file
  - `src/coding/functions/apiService.functions.js` file
  - `src/services/apiService/index.js` export file

- **When user says "create AuthContext context"**: Automatically create:
  - `src/context/AuthContext/` directory
  - `src/coding/javascript/AuthContext.js` file
  - `src/coding/logic/AuthContext.logic.js` file
  - `src/coding/functions/AuthContext.functions.js` file
  - `src/context/AuthContext/index.js` export file

- **When user says "create Popup page"**: Automatically create:
  - `src/pages/Popup/` directory
  - `src/coding/html/Popup.html` file
  - `src/coding/css/Popup.css` file
  - `src/coding/javascript/Popup.js` file
  - `src/coding/logic/Popup.logic.js` file
  - `src/coding/functions/Popup.functions.js` file
  - `src/pages/Popup/index.js` export file

- **When user says "create Modal modal"**: Automatically create:
  - `src/components/Modal/` directory
  - `src/coding/html/Modal.html` file
  - `src/coding/css/Modal.css` file
  - `src/coding/javascript/Modal.js` file
  - `src/coding/logic/Modal.logic.js` file
  - `src/coding/functions/Modal.functions.js` file
  - `src/components/Modal/index.js` export file

### Rule 6: Automatic File Placement Enforcement
- **HTML files**: ALWAYS go to `src/coding/html/`
- **CSS files**: ALWAYS go to `src/coding/css/`
- **JavaScript files**: ALWAYS go to `src/coding/javascript/`
- **Logic files**: ALWAYS go to `src/coding/logic/`
- **Function files**: ALWAYS go to `src/coding/functions/`
- **Common files**: ALWAYS go to `src/coding/common/`
- **Type files**: ALWAYS go to `src/coding/types/`
- **Constant files**: ALWAYS go to `src/coding/constants/`

### Rule 7: Automatic Directory Creation Enforcement
- **If directory doesn't exist**: Automatically create it
- **If file type directory missing**: Automatically create it
- **If component directory missing**: Automatically create it
- **Maintain proper hierarchy**: Always follow the established structure

### Rule 8: Chrome Extension File Enforcement
- **manifest.json**: ALWAYS in root directory
- **Background scripts**: ALWAYS in `src/background/`
- **Content scripts**: ALWAYS in `src/content/`
- **Popup files**: ALWAYS in `src/popup/`
- **Options files**: ALWAYS in `src/options/`
- **Asset files**: ALWAYS in `src/assets/`

## 4. ðŸš¨ **COMPLETE MODULAR STRUCTURE SUMMARY (CRITICAL - 100% COMPLIANCE)**

### Complete Professional Chrome Extension Structure
```
chrome-extension-project/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ coding/                    # MAIN FILE TYPE SEPARATION
â”‚   â”‚   â”œâ”€â”€ html/                 # ALL HTML files from all components
â”‚   â”‚   â”œâ”€â”€ css/                  # ALL CSS files from all components
â”‚   â”‚   â”œâ”€â”€ javascript/           # ALL JavaScript files from all components
â”‚   â”‚   â”œâ”€â”€ logic/                # ALL Business logic files from all components
â”‚   â”‚   â”œâ”€â”€ functions/            # ALL Utility functions from all components
â”‚   â”‚   â”œâ”€â”€ common/               # ALL Shared/common files
â”‚   â”‚   â”œâ”€â”€ types/                # ALL Type definitions
â”‚   â”‚   â””â”€â”€ constants/            # ALL Constants and configuration
â”‚   â”œâ”€â”€ components/               # Reusable UI components (Button, Modal, etc.)
â”‚   â”œâ”€â”€ hooks/                    # Custom hooks (useAuth, useFetch, etc.)
â”‚   â”œâ”€â”€ utils/                    # Utility functions (formatDate, calculateSum, etc.)
â”‚   â”œâ”€â”€ services/                 # API services and business logic
â”‚   â”œâ”€â”€ context/                  # Context providers (AuthContext, ThemeContext, etc.)
â”‚   â”œâ”€â”€ pages/                    # Page components (Popup, Options, etc.)
â”‚   â”œâ”€â”€ background/               # Background service worker
â”‚   â”œâ”€â”€ content/                  # Content scripts
â”‚   â”œâ”€â”€ popup/                    # Popup interface
â”‚   â”œâ”€â”€ options/                  # Options page
â”‚   â””â”€â”€ assets/                   # Static assets (icons, images)
â”œâ”€â”€ manifest.json                 # Extension manifest (Manifest V3)
â”œâ”€â”€ package.json                  # Project metadata
â””â”€â”€ .cursor/rules/                # Cursor AI rules
```

### Automatic Creation Examples
- **"create Button component"** â†’ Creates Button directory + all file types
- **"create useAuth hook"** â†’ Creates useAuth directory + JS/Logic/Functions files
- **"create formatDate utility"** â†’ Creates formatDate directory + JS/Logic/Functions files
- **"create apiService service"** â†’ Creates apiService directory + JS/Logic/Functions files
- **"create AuthContext context"** â†’ Creates AuthContext directory + JS/Logic/Functions files
- **"create Popup page"** â†’ Creates Popup directory + HTML/CSS/JS/Logic/Functions files
- **"create Modal modal"** â†’ Creates Modal directory + HTML/CSS/JS/Logic/Functions files

## 5. ðŸš¨ **FINAL STRUCTURE ENFORCEMENT RULES (CRITICAL - 100% COMPLIANCE)**

### Rule 9: Mandatory Structure Compliance
- **NEVER create files outside designated directories**
- **NEVER mix file types in single directories**
- **NEVER skip component directory creation**
- **ALWAYS follow the established structure exactly**
- **ALWAYS create all required files for components**

### Rule 10: Automatic Structure Validation
- **Before creating any file**: Validate it goes to correct directory
- **Before creating any component**: Validate all required files are created
- **Before creating any directory**: Validate it follows the structure
- **After any creation**: Verify structure compliance

### Rule 11: Structure Violation Prevention
- **If structure violation detected**: STOP and correct immediately
- **If wrong directory used**: Move file to correct location
- **If missing files**: Create all required files
- **If structure broken**: Restore proper organization

## 5. Code Generation Rules (CRITICAL - 100% Compliance)

### Preventing Complete File Rewrites

#### When Complete Rewrites Are NOT Allowed
- **Existing files** - never rewrite entire files unless specifically requested
- **Working code** - preserve existing functionality and only modify what's needed
- **Large files** - break changes into smaller, focused modifications
- **Production code** - maintain stability and only change what's necessary

#### Incremental Change Strategy
- **Identify specific lines** that need modification
- **Use Cursor AI editor** for targeted changes
- **Preserve context** around modified sections
- **Add new code** without removing working existing code
- **Document changes** clearly for future reference

#### Implementation Guidelines
- **For new features**: Show only the new code to add
- **For modifications**: Use `// ... existing code ...` to indicate unchanged parts
- **For deletions**: Clearly mark what to remove
- **For file creation**: Provide minimal boilerplate + specific additions

#### Response Format Examples
```typescript
// Add this function to the existing class
public newMethod(): void {
    // Implementation here
}

// ... existing code ...

// Replace this line
- oldCode();
+ newCode();
```

#### Benefits
- **Eliminates token waste** from unnecessary code
- **Prevents network timeouts** and errors
- **Improves response clarity** and focus
- **Enables faster iteration** and development
- **Reduces confusion** about what actually changed

## 3. ðŸš¨ **NEW CRITICAL ENFORCEMENT RULES**

### Rule 5: File Size Detection
- **Before making changes**: Check file size and line count
- **If file > 100 lines**: Use incremental changes only
- **If file > 500 lines**: Break into multiple small changes
- **If file > 1000 lines**: Use Cursor AI editor with incremental changes only

### Rule 6: Change Scope Limitation
- **Maximum change scope**: 50 lines per change
- **Multiple changes**: Break into separate operations
- **Large modifications**: Use iterative approach
- **File rewrites**: NEVER allowed without explicit permission

### Rule 7: Context Preservation
- **Show surrounding context**: 2-3 lines before and after changes
- **Use line numbers**: Reference specific line numbers for changes
- **Maintain file structure**: Don't break existing organization
- **Preserve imports**: Keep all existing import statements

### Rule 8: Change Documentation
- **Document every change**: What was changed and why
- **Use clear markers**: `// ADD:`, `// REPLACE:`, `// REMOVE:`
- **Reference line numbers**: Always specify where changes go
- **Explain purpose**: Why the change is needed

## 4. ðŸš¨ **ANTI-REWRITE ENFORCEMENT MECHANISMS**

### Mechanism 1: File Existence Check
```bash
# ALWAYS check if file exists before suggesting changes
if [ -f "filename.mjs" ]; then
    echo "File exists - use incremental changes only"
    echo "NEVER rewrite entire file"
else
    echo "New file - provide minimal boilerplate + specific additions"
fi
```

### Mechanism 2: Change Size Validation
```bash
# Validate change size before applying
change_lines=$(echo "$proposed_change" | wc -l)
if [ "$change_lines" -gt 50 ]; then
    echo "Change too large - break into smaller parts"
    echo "Maximum allowed: 50 lines per change"
fi
```

### Mechanism 3: File Rewrite Prevention
```bash
# Prevent file rewrites
if [[ "$proposed_change" == *"entire file"* ]] || [[ "$proposed_change" == *"complete rewrite"* ]]; then
    echo "ðŸš¨ FILE REWRITE DETECTED - STOP IMMEDIATELY"
    echo "Use incremental changes only"
    exit 1
fi
```

## 5. ðŸš¨ **MINIMAL CHANGE EXAMPLES**

### Example 1: Adding a Function
```javascript
// ADD: New function after line 45
// ... existing code ...

/**
 * Validates user input data
 * @param {Object} data - User input data
 * @returns {boolean} - Validation result
 */
function validateUserData(data) {
    return data && typeof data === 'object' && data.name && data.email;
}

// ... existing code ...
```

### Example 2: Modifying Existing Code
```javascript
// REPLACE: Lines 23-25
- const oldValidation = checkData(userInput);
- if (oldValidation) {
-     processData(userInput);
+ const isValid = validateUserData(userInput);
+ if (isValid) {
+     processUserData(userInput);
```

### Example 3: Adding Import Statement
```javascript
// ADD: Import statement at line 3
import { validateUserData } from './validation.mjs';
// ... existing code ...
```

### Example 4: Removing Code
```javascript
// REMOVE: Lines 67-70 (deprecated function)
- /**
-  * @deprecated Use validateUserData instead
-  */
- function oldValidation() {
-     // Deprecated implementation
- }
```

## 6. ðŸš¨ **RULE VIOLATION PENALTIES (ENFORCED)**

### Penalties for File Rewrites
- **File Rewrite Violation**: If Cursor AI rewrites entire files
  - **Penalty**: Must immediately stop and use incremental changes
  - **Verification**: Must prove only specific lines were changed
  - **Documentation**: Must document the violation and correction

### Penalties for Large Changes
- **Large Change Violation**: If Cursor AI makes changes > 50 lines
  - **Penalty**: Must break into smaller, focused changes
  - **Verification**: Must prove changes are under 50 lines each
  - **Documentation**: Must document the violation and correction

### Penalties for Context Loss
- **Context Loss Violation**: If Cursor AI loses file context
  - **Penalty**: Must reread file and regain context
  - **Verification**: Must prove context understanding
  - **Documentation**: Must document the violation and correction

## 7. ðŸš¨ **RULE TESTING MECHANISM**

### Test 1: File Rewrite Prevention
```bash
echo "ðŸŽ¯ TESTING FILE REWRITE PREVENTION..."
echo "If Cursor AI rewrites entire files, rule violation detected"
echo "Expected: Only specific changes shown"
echo "Actual: Check response for complete file content"
```

### Test 2: Change Size Validation
```bash
echo "ðŸŽ¯ TESTING CHANGE SIZE VALIDATION..."
echo "If Cursor AI shows changes > 50 lines, rule violation detected"
echo "Expected: Changes under 50 lines each"
echo "Actual: Count lines in proposed changes"
```

### Test 3: Context Preservation
```bash
echo "ðŸŽ¯ TESTING CONTEXT PRESERVATION..."
echo "If Cursor AI loses file context, rule violation detected"
echo "Expected: Clear reference to existing code structure"
echo "Actual: Check for context markers and line numbers"
```

## 8. ðŸš¨ **EMERGENCY PROCEDURES**

### If File Rewrite is Detected
1. **STOP immediately** - don't continue with rewrite
2. **Switch to incremental changes** - show only what needs to change
3. **Use Cursor AI editor** - target specific lines only
4. **Preserve existing code** - don't remove working functionality
5. **Document the violation** - record what went wrong

### If Large Changes are Detected
1. **Break into smaller parts** - maximum 50 lines per change
2. **Use iterative approach** - one change at a time
3. **Maintain context** - show surrounding code for each change
4. **Verify each change** - ensure it's focused and specific
5. **Document the process** - explain how changes were broken down

### If Context is Lost
1. **Reread the file** - regain understanding of structure
2. **Use line numbers** - reference specific locations
3. **Show surrounding code** - provide context for changes
4. **Explain relationships** - how changes fit into existing code
5. **Verify understanding** - confirm context is restored

## 9. Benefits of Minimal Change Approach

### Performance Benefits
- **Faster response times** - no unnecessary code generation
- **Reduced token usage** - focus on what actually needs to change
- **Better network performance** - smaller responses, fewer timeouts
- **Improved reliability** - less chance of generation errors

### Development Benefits
- **Clearer changes** - easy to see what was modified
- **Better version control** - focused commits with clear purposes
- **Easier debugging** - changes are isolated and specific
- **Faster iteration** - quick changes without full file processing

### Maintenance Benefits
- **Preserved functionality** - existing code remains intact
- **Reduced risk** - smaller changes are less likely to break things
- **Better documentation** - clear record of what changed and why
- **Easier rollback** - specific changes can be undone individually

## 10. Implementation Checklist

### Before Making Any Changes
- [ ] **File exists check** - is this a new file or existing file?
- [ ] **File size assessment** - how many lines does the file have?
- [ ] **Change scope planning** - what specific lines need modification?
- [ ] **Context understanding** - what surrounds the areas to change?
- [ ] **Incremental approach** - can this be broken into smaller changes?

### During Change Implementation
- [ ] **Use specific line numbers** - reference exact locations
- [ ] **Show surrounding context** - 2-3 lines before and after
- [ ] **Use clear markers** - ADD, REPLACE, REMOVE
- [ ] **Preserve existing code** - don't remove unless explicitly told
- [ ] **Document changes** - explain what and why

### After Change Implementation
- [ ] **Verify change size** - ensure under 50 lines
- [ ] **Check context preservation** - ensure surrounding code intact
- [ ] **Document violations** - if any rules were broken
- [ ] **Provide rollback info** - how to undo if needed
- [ ] **Confirm completion** - verify all requested changes made

## Conclusion

These strengthened code generation rules ensure that Cursor AI NEVER rewrites entire files and ALWAYS uses minimal, incremental changes. The new enforcement mechanisms prevent file rewrites, limit change scope, and maintain code context. 

**Remember: NEVER rewrite files, ONLY show specific changes, preserve existing code always!**

## Rule Verification Status

- **File rewrite prevention**: âœ… ENFORCED
- **Change size limits**: âœ… ENFORCED  
- **Context preservation**: âœ… ENFORCED
- **Incremental approach**: âœ… ENFORCED
- **Rule violations**: âœ… PENALIZED

**Status: ALL ANTI-REWRITE RULES ACTIVE - FILE REWRITES PREVENTED**


These code generation and project structure rules ensure that Cursor AI creates maintainable, reusable code with proper organization and no duplication. The strict project structure and import strategy maximize reusability and maintainability.

**Remember: No mixed concerns, no code duplication, proper file extensions always!**
