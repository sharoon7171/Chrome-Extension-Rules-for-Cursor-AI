---
description: Code generation rules, coding style standards, professional project structure, and anti-duplication guidelines with .mjs module support
globs: ['**/*']
alwaysApply: true
---

# Code Generation and Project Structure Rules

## ðŸš¨ **CRITICAL RULE: NEVER REWRITE ENTIRE FILES (100% COMPLIANCE)**

### Core Principle
- **NEVER write complete code files** unless explicitly requested
- **ONLY provide necessary changes** or additions to existing code
- **Focus on specific modifications** rather than full file rewrites
- **STRICT professional modular project structure** with mandatory separation of concerns
- **Support .mjs file extensions** for ES6+ modules and modern JavaScript syntax

## 1. ðŸš¨ **MANDATORY MINIMAL CHANGE RULES (CRITICAL - 100% COMPLIANCE)**

### Rule 1: NEVER Rewrite Existing Files
- **EXISTING FILES ARE OFF-LIMITS** for complete rewrites
- **ONLY modify specific lines** that need changes
- **PRESERVE ALL existing code** unless explicitly told to remove
- **USE Cursor AI editor** for targeted modifications
- **SHOW ONLY what needs to change** - never the entire file

### Rule 2: Mandatory Change Format
```
// ONLY show the specific change needed:

// Add this function after line 45:
function newFunction() {
    // Implementation here
}

// OR

// Replace line 23:
- oldCode();
+ newCode();

// OR

// Insert after line 67:
// ... existing code ...
newCode();
// ... existing code ...
```

### Rule 3: File Rewrite Prevention
- **If file exists**: ONLY show changes, never rewrite
- **If file is new**: Provide minimal boilerplate + specific additions
- **If file is large**: Break into smaller, focused modifications
- **If file is complex**: Use incremental approach, one change at a time

### Rule 4: Token Efficiency Enforcement
- **Prevent token overflow** by showing minimal changes
- **Avoid network timeouts** from unnecessary code generation
- **Focus on specific functionality** rather than complete rewrites
- **Maintain context** across task segments

## 2. ðŸš¨ **ULTRA-MEGA-MODULAR PROJECT STRUCTURE ENFORCEMENT (CRITICAL - 100% COMPLIANCE)**

### Core Principle
- **ULTRA-MEGA-MODULAR project structure** with MAXIMUM separation of concerns
- **EVERY SINGLE FUNCTION gets its own directory** with multiple files for maximum reusability
- **EVERY SINGLE STYLE gets its own directory** with multiple files for maximum reusability
- **EVERY SINGLE COMPONENT gets its own directory** with multiple files for maximum reusability
- **File type separation** - HTML (.html), CSS (.css), JavaScript (.js/.mjs), Logic (.js/.mjs), Functions (.js/.mjs) in separate directories
- **Component separation** - Each component maintains its own organization
- **Professional Chrome extension structure** - follow Manifest V3 best practices
- **Vanilla JavaScript approach** - NO frameworks, NO libraries, NO TypeScript
- **Chrome extension compliance** - Use .js for regular scripts, .mjs for ES6 modules as per Chrome 136+ policies
- **MAXIMUM REUSABILITY** - Every piece of code can be reused anywhere in the project

### Rule 1: Mandatory File Type Separation
```
src/
â”œâ”€â”€ coding/                    # MAIN FILE TYPE SEPARATION
â”‚   â”œâ”€â”€ html/                 # ALL HTML files from all components (.html)
â”‚   â”œâ”€â”€ css/                  # ALL CSS files from all components (.css)
â”‚   â”œâ”€â”€ javascript/           # ALL JavaScript files from all components (.js/.mjs)
â”‚   â”œâ”€â”€ logic/                # ALL Business logic files from all components (.js/.mjs)
â”‚   â”œâ”€â”€ functions/            # ALL Utility functions from all components (.js/.mjs)
â”‚   â”œâ”€â”€ common/               # ALL Shared/common files
â”‚   â”œâ”€â”€ types/                # ALL Type definitions
â”‚   â””â”€â”€ constants/            # ALL Constants and configuration
```

### Rule 1.1: ULTRA-MEGA-MODULAR APPROACH (NEW - CRITICAL)
- **EVERY SINGLE FUNCTION gets its own directory** with multiple files
- **EVERY SINGLE STYLE gets its own directory** with multiple files
- **EVERY SINGLE COMPONENT gets its own directory** with multiple files
- **MAXIMUM REUSABILITY** - if you create a button, you can reuse it everywhere
- **ULTRA-SEPARATION** - even within options page, every option gets its own directory

#### Example: Button Component Ultra-Modular Structure
```
src/
â”œâ”€â”€ components/
â”‚   â””â”€â”€ Button/                    # Button component directory
â”‚       â”œâ”€â”€ Button.html            # Goes to coding/html/Button/
â”‚       â”œâ”€â”€ Button.css             # Goes to coding/css/Button/
â”‚       â”œâ”€â”€ Button.mjs             # Goes to coding/javascript/Button/
â”‚       â”œâ”€â”€ Button.logic.mjs       # Goes to coding/logic/Button/
â”‚       â”œâ”€â”€ Button.functions.mjs   # Goes to coding/functions/Button/
â”‚       â””â”€â”€ index.mjs              # Export file
â”œâ”€â”€ coding/
â”‚   â”œâ”€â”€ html/
â”‚   â”‚   â””â”€â”€ Button/                # Button HTML subdirectory
â”‚   â”‚       â”œâ”€â”€ Button.html        # Main button HTML
â”‚   â”‚       â”œâ”€â”€ Button.icon.html   # Button icon HTML
â”‚   â”‚       â””â”€â”€ Button.text.html   # Button text HTML
â”‚   â”œâ”€â”€ css/
â”‚   â”‚   â””â”€â”€ Button/                # Button CSS subdirectory
â”‚   â”‚       â”œâ”€â”€ Button.css         # Main button styles
â”‚   â”‚       â”œâ”€â”€ Button.states.css  # Button state styles
â”‚   â”‚       â”œâ”€â”€ Button.sizes.css   # Button size variations
â”‚   â”‚       â””â”€â”€ Button.themes.css  # Button theme variations
â”‚   â”œâ”€â”€ javascript/
â”‚   â”‚   â””â”€â”€ Button/                # Button JS subdirectory
â”‚   â”‚       â”œâ”€â”€ Button.mjs         # Main button functionality
â”‚   â”‚       â”œâ”€â”€ Button.events.mjs  # Button event handlers
â”‚   â”‚       â”œâ”€â”€ Button.animation.mjs # Button animations
â”‚   â”‚       â””â”€â”€ Button.validation.mjs # Button validation
â”‚   â”œâ”€â”€ logic/
â”‚   â”‚   â””â”€â”€ Button/                # Button logic subdirectory
â”‚   â”‚       â”œâ”€â”€ Button.logic.mjs   # Main button logic
â”‚   â”‚       â”œâ”€â”€ Button.state.mjs   # Button state management
â”‚   â”‚       â””â”€â”€ Button.behavior.mjs # Button behavior logic
â”‚   â””â”€â”€ functions/
â”‚       â””â”€â”€ Button/                # Button functions subdirectory
â”‚           â”œâ”€â”€ Button.functions.mjs # Main button functions
â”‚           â”œâ”€â”€ Button.helpers.mjs  # Button helper functions
â”‚           â”œâ”€â”€ Button.utils.mjs    # Button utility functions
â”‚           â””â”€â”€ Button.constants.mjs # Button constants
```

#### Example: Options Page Ultra-Mega-Modular Structure (NEW)
```
src/
â”œâ”€â”€ pages/
â”‚   â””â”€â”€ Options/                    # Options page directory
â”‚       â”œâ”€â”€ Options.html            # Goes to coding/html/Options/
â”‚       â”œâ”€â”€ Options.css             # Goes to coding/css/Options/
â”‚       â”œâ”€â”€ Options.mjs             # Goes to coding/javascript/Options/
â”‚       â”œâ”€â”€ Options.logic.mjs       # Goes to coding/logic/Options/
â”‚       â”œâ”€â”€ Options.functions.mjs   # Goes to coding/functions/Options/
â”‚       â””â”€â”€ index.mjs               # Export file
â”œâ”€â”€ coding/
â”‚   â”œâ”€â”€ html/
â”‚   â”‚   â””â”€â”€ Options/                # Options HTML subdirectory
â”‚   â”‚       â”œâ”€â”€ Options.html        # Main options page HTML
â”‚   â”‚       â”œâ”€â”€ Options.header.html # Options header HTML
â”‚   â”‚       â”œâ”€â”€ Options.sidebar.html # Options sidebar HTML
â”‚   â”‚       â”œâ”€â”€ Options.content.html # Options content HTML
â”‚   â”‚       â””â”€â”€ Options.footer.html # Options footer HTML
â”‚   â”œâ”€â”€ css/
â”‚   â”‚   â””â”€â”€ Options/                # Options CSS subdirectory
â”‚   â”‚       â”œâ”€â”€ Options.css         # Main options styles
â”‚   â”‚       â”œâ”€â”€ Options.layout.css  # Options layout styles
â”‚   â”‚       â”œâ”€â”€ Options.theme.css   # Options theme styles
â”‚   â”‚       â”œâ”€â”€ Options.responsive.css # Options responsive styles
â”‚   â”‚       â””â”€â”€ Options.animations.css # Options animation styles
â”‚   â”œâ”€â”€ javascript/
â”‚   â”‚   â””â”€â”€ Options/                # Options JS subdirectory
â”‚   â”‚       â”œâ”€â”€ Options.mjs         # Main options functionality
â”‚   â”‚       â”œâ”€â”€ Options.navigation.mjs # Options navigation
â”‚   â”‚       â”œâ”€â”€ Options.settings.mjs # Options settings management
â”‚   â”‚       â”œâ”€â”€ Options.validation.mjs # Options validation
â”‚   â”‚       â””â”€â”€ Options.storage.mjs # Options storage handling
â”‚   â”œâ”€â”€ logic/
â”‚   â”‚   â””â”€â”€ Options/                # Options logic subdirectory
â”‚   â”‚       â”œâ”€â”€ Options.logic.mjs   # Main options logic
â”‚   â”‚       â”œâ”€â”€ Options.state.mjs   # Options state management
â”‚   â”‚       â”œâ”€â”€ Options.config.mjs  # Options configuration logic
â”‚   â”‚       â””â”€â”€ Options.permissions.mjs # Options permissions logic
â”‚   â””â”€â”€ functions/
â”‚       â””â”€â”€ Options/                # Options functions subdirectory
â”‚           â”œâ”€â”€ Options.functions.mjs # Main options functions
â”‚           â”œâ”€â”€ Options.helpers.mjs  # Options helper functions
â”‚           â”œâ”€â”€ Options.utils.mjs    # Options utility functions
â”‚           â””â”€â”€ Options.constants.mjs # Options constants
```

### Rule 1.2: ULTRA-MEGA-MODULAR BENEFITS (NEW - CRITICAL)
- **MAXIMUM REUSABILITY** - Every piece of code can be reused anywhere
- **EASY MAINTENANCE** - Each function/style/component is isolated
- **CLEAR ORGANIZATION** - Everything has its logical place
- **TEAM COLLABORATION** - Multiple developers can work on different parts
- **VERSION CONTROL** - Easy to track changes to specific functionality
- **TESTING** - Each piece can be tested independently
- **SCALABILITY** - Easy to add new features without affecting existing code

#### Example: Reusing Button Component Everywhere
```
# In Popup page - reuse Button component
import { Button } from '../../components/Button/index.mjs';

# In Options page - reuse Button component  
import { Button } from '../../components/Button/index.mjs';

# In Content script - reuse Button component
import { Button } from '../../components/Button/index.mjs';

# In Background script - reuse Button logic
import { ButtonLogic } from '../../components/Button/Button.logic.mjs';
```

#### Example: Reusing Button Styles Everywhere
```css
/* In Popup.css - reuse Button styles */
@import url('../coding/css/Button/Button.css');
@import url('../coding/css/Button/Button.states.css');

/* In Options.css - reuse Button styles */
@import url('../coding/css/Button/Button.css');
@import url('../coding/css/Button/Button.themes.css');

/* In Content.css - reuse Button styles */
@import url('../coding/css/Button/Button.css');
@import url('../coding/css/Button/Button.sizes.css');
```

### Rule 1.3: ULTRA-MEGA-MODULAR CREATION WORKFLOW (NEW - CRITICAL)

### Rule 1.4: AUTOMATIC ORGANIZATION INTELLIGENCE (NEW - CRITICAL)
- **Cursor AI MUST automatically detect** what components/elements are needed
- **NO need for user to specify** individual components like "create button, create checkbox"
- **Automatically analyze requirements** and create all necessary components
- **Intelligent component detection** based on functionality description
- **Automatic dependency creation** for all required UI elements

#### Automatic Component Detection Examples:

**When User Says "Add Some Option":**
**AUTOMATICALLY DETECT AND CREATE:**

1. **Form Components (Automatically Created):**
   - Radio buttons for single selection
   - Checkboxes for multiple selection
   - Input fields for text input
   - Select dropdowns for choices
   - Tables for data display
   - Labels for accessibility

2. **Layout Components (Automatically Created):**
   - Form containers
   - Field groups
   - Spacing elements
   - Responsive wrappers

3. **Interactive Components (Automatically Created):**
   - Buttons for actions
   - Toggle switches
   - Sliders for ranges
   - Color pickers if needed

**When User Says "Create Settings Page":**
**AUTOMATICALLY DETECT AND CREATE:**

1. **All Form Elements:**
   - Text inputs
   - Number inputs
   - Checkboxes
   - Radio buttons
   - Select dropdowns
   - Toggle switches
   - Sliders
   - Color pickers
   - File uploads

2. **All Layout Elements:**
   - Headers
   - Sidebars
   - Content areas
   - Footers
   - Navigation menus
   - Breadcrumbs

3. **All Interactive Elements:**
   - Buttons (save, cancel, reset)
   - Modals for confirmations
   - Tooltips for help
   - Progress indicators

**When User Says "Add Search Functionality":**
**AUTOMATICALLY DETECT AND CREATE:**

1. **Search Components:**
   - Search input field
   - Search button
   - Search results container
   - Search filters
   - Search suggestions
   - Search history

2. **Results Components:**
   - Result lists
   - Result cards
   - Pagination
   - Sorting controls
   - Filter controls

#### When User Says "Create Button Component"
**AUTOMATICALLY CREATE:**

1. **Component Directory Structure:**
   ```
   src/components/Button/
   â”œâ”€â”€ Button.html
   â”œâ”€â”€ Button.css
   â”œâ”€â”€ Button.mjs
   â”œâ”€â”€ Button.logic.mjs
   â”œâ”€â”€ Button.functions.mjs
   â””â”€â”€ index.mjs
   ```

2. **HTML Subdirectory Structure:**
   ```
   src/coding/html/Button/
   â”œâ”€â”€ Button.html          # Main button HTML
   â”œâ”€â”€ Button.icon.html     # Button icon HTML
   â”œâ”€â”€ Button.text.html     # Button text HTML
   â””â”€â”€ Button.wrapper.html  # Button wrapper HTML
   ```

3. **CSS Subdirectory Structure:**
   ```
   src/coding/css/Button/
   â”œâ”€â”€ Button.css           # Main button styles
   â”œâ”€â”€ Button.states.css    # Button state styles (hover, active, disabled)
   â”œâ”€â”€ Button.sizes.css     # Button size variations (small, medium, large)
   â”œâ”€â”€ Button.themes.css    # Button theme variations (primary, secondary, danger)
   â”œâ”€â”€ Button.layout.css    # Button layout styles
   â””â”€â”€ Button.animations.css # Button animation styles
   ```

4. **JavaScript Subdirectory Structure:**
   ```
   src/coding/javascript/Button/
   â”œâ”€â”€ Button.mjs           # Main button functionality
   â”œâ”€â”€ Button.events.mjs    # Button event handlers
   â”œâ”€â”€ Button.animation.mjs # Button animations
   â”œâ”€â”€ Button.validation.mjs # Button validation
   â””â”€â”€ Button.accessibility.mjs # Button accessibility features
   ```

5. **Logic Subdirectory Structure:**
   ```
   src/coding/logic/Button/
   â”œâ”€â”€ Button.logic.mjs     # Main button logic
   â”œâ”€â”€ Button.state.mjs     # Button state management
   â”œâ”€â”€ Button.behavior.mjs  # Button behavior logic
   â””â”€â”€ Button.config.mjs    # Button configuration logic
   ```

6. **Functions Subdirectory Structure:**
   ```
   src/coding/functions/Button/
   â”œâ”€â”€ Button.functions.mjs # Main button functions
   â”œâ”€â”€ Button.helpers.mjs   # Button helper functions
   â”œâ”€â”€ Button.utils.mjs     # Button utility functions
   â””â”€â”€ Button.constants.mjs # Button constants
   ```

#### When User Says "Create Options Page"
**AUTOMATICALLY CREATE:**

1. **Page Directory Structure:**
   ```
   src/pages/Options/
   â”œâ”€â”€ Options.html
   â”œâ”€â”€ Options.css
   â”œâ”€â”€ Options.mjs
   â”œâ”€â”€ Options.logic.mjs
   â”œâ”€â”€ Options.functions.mjs
   â””â”€â”€ index.mjs
   ```

2. **HTML Subdirectory Structure:**
   ```
   src/coding/html/Options/
   â”œâ”€â”€ Options.html         # Main options page HTML
   â”œâ”€â”€ Options.header.html  # Options header HTML
   â”œâ”€â”€ Options.sidebar.html # Options sidebar HTML
   â”œâ”€â”€ Options.content.html # Options content HTML
   â”œâ”€â”€ Options.footer.html  # Options footer HTML
   â””â”€â”€ Options.modal.html   # Options modal HTML
   ```

3. **CSS Subdirectory Structure:**
   ```
   src/coding/css/Options/
   â”œâ”€â”€ Options.css          # Main options styles
   â”œâ”€â”€ Options.layout.css   # Options layout styles
   â”œâ”€â”€ Options.theme.css    # Options theme styles
   â”œâ”€â”€ Options.responsive.css # Options responsive styles
   â”œâ”€â”€ Options.animations.css # Options animation styles
   â””â”€â”€ Options.print.css    # Options print styles
   ```

4. **JavaScript Subdirectory Structure:**
   ```
   src/coding/javascript/Options/
   â”œâ”€â”€ Options.mjs          # Main options functionality
   â”œâ”€â”€ Options.navigation.mjs # Options navigation
   â”œâ”€â”€ Options.settings.mjs # Options settings management
   â”œâ”€â”€ Options.validation.mjs # Options validation
   â”œâ”€â”€ Options.storage.mjs  # Options storage handling
   â””â”€â”€ Options.export.mjs   # Options export functionality
   ```

5. **Logic Subdirectory Structure:**
   ```
   src/coding/logic/Options/
   â”œâ”€â”€ Options.logic.mjs    # Main options logic
   â”œâ”€â”€ Options.state.mjs    # Options state management
   â”œâ”€â”€ Options.config.mjs   # Options configuration logic
   â”œâ”€â”€ Options.permissions.mjs # Options permissions logic
   â””â”€â”€ Options.sync.mjs     # Options sync logic
   ```

6. **Functions Subdirectory Structure:**
   ```
   src/coding/functions/Options/
   â”œâ”€â”€ Options.functions.mjs # Main options functions
   â”œâ”€â”€ Options.helpers.mjs   # Options helper functions
   â”œâ”€â”€ Options.utils.mjs     # Options utility functions
   â”œâ”€â”€ Options.constants.mjs # Options constants
   â””â”€â”€ Options.formatters.mjs # Options data formatters
   ```

### Rule 1.5: AUTOMATIC ORGANIZATION WORKFLOW (NEW - CRITICAL)

#### Step 1: Requirement Analysis
**When User Says ANYTHING, Cursor AI MUST:**

1. **Analyze the requirement** - understand what functionality is needed
2. **Identify all components** - automatically detect what UI elements are required
3. **Determine dependencies** - figure out what other components are needed
4. **Plan the structure** - organize everything in ultra-modular fashion
5. **Create everything automatically** - no need for user to specify individual components

#### Step 1.1: Cursor AI Thinking Process (NEW - CRITICAL)
**Cursor AI MUST Think Like This:**

**User Input:** "Add some option"
**Cursor AI Analysis:**
- "Options need form elements"
- "Forms need input fields, checkboxes, radio buttons"
- "Forms need layout containers and spacing"
- "Forms need interactive elements like buttons"
- "Each element needs its own component for reusability"
- "I'll create ALL components automatically"

**User Input:** "Create settings page"
**Cursor AI Analysis:**
- "Settings pages need many form elements"
- "I'll create text inputs, checkboxes, radio buttons, selects, toggles"
- "I'll create layout components for organization"
- "I'll create interactive components for actions"
- "I'll create navigation and structure components"
- "I'll create ALL components automatically"

**User Input:** "Add search functionality"
**Cursor AI Analysis:**
- "Search needs input field, button, results container"
- "Search needs filters, pagination, sorting"
- "Search needs suggestions and history"
- "I'll create ALL search-related components automatically"
- "Each component will be ultra-modular and reusable"

#### Step 2: Automatic Component Creation
**Example: User Says "Add Some Option"**

**Cursor AI Automatically Creates:**

1. **Form Components:**
   ```
   src/components/RadioButton/     # Radio button component
   src/components/Checkbox/         # Checkbox component
   src/components/Input/            # Input field component
   src/components/Select/           # Select dropdown component
   src/components/Table/            # Table component
   src/components/Label/            # Label component
   ```

2. **Layout Components:**
   ```
   src/components/FormContainer/    # Form wrapper
   src/components/FieldGroup/       # Field grouping
   src/components/Spacing/          # Spacing utilities
   src/components/ResponsiveWrapper/ # Responsive container
   ```

3. **Interactive Components:**
   ```
   src/components/Button/           # Action buttons
   src/components/Toggle/           # Toggle switches
   src/components/Slider/           # Range sliders
   src/components/ColorPicker/      # Color selection
   ```

#### Step 3: Automatic File Organization
**For EACH Component, Cursor AI Automatically Creates:**

```
src/
â”œâ”€â”€ components/ComponentName/       # Main component directory
â”œâ”€â”€ coding/html/ComponentName/      # HTML subdirectory with multiple files
â”œâ”€â”€ coding/css/ComponentName/       # CSS subdirectory with multiple files
â”œâ”€â”€ coding/javascript/ComponentName/ # JS subdirectory with multiple files
â”œâ”€â”€ coding/logic/ComponentName/     # Logic subdirectory with multiple files
â””â”€â”€ coding/functions/ComponentName/ # Functions subdirectory with multiple files
```

#### Step 4: Automatic Import/Export Setup
**Cursor AI Automatically:**

1. **Creates index.mjs files** for each component
2. **Sets up proper imports** between components
3. **Creates main page files** that import all needed components
4. **Sets up CSS imports** for all component styles
5. **Configures logic imports** for all component logic

#### Step 5: Automatic Creation Examples (NEW - CRITICAL)

**Example 1: User Says "Add Some Option"**
**Cursor AI Automatically Creates:**

```
src/
â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ RadioButton/          # Radio button component
â”‚   â”œâ”€â”€ Checkbox/             # Checkbox component
â”‚   â”œâ”€â”€ Input/                # Input field component
â”‚   â”œâ”€â”€ Select/               # Select dropdown component
â”‚   â”œâ”€â”€ Table/                # Table component
â”‚   â”œâ”€â”€ Label/                # Label component
â”‚   â”œâ”€â”€ FormContainer/        # Form wrapper component
â”‚   â”œâ”€â”€ FieldGroup/           # Field grouping component
â”‚   â”œâ”€â”€ Button/               # Action button component
â”‚   â””â”€â”€ Toggle/               # Toggle switch component
â”œâ”€â”€ coding/
â”‚   â”œâ”€â”€ html/
â”‚   â”‚   â”œâ”€â”€ RadioButton/      # Radio button HTML files
â”‚   â”‚   â”œâ”€â”€ Checkbox/         # Checkbox HTML files
â”‚   â”‚   â”œâ”€â”€ Input/            # Input HTML files
â”‚   â”‚   â”œâ”€â”€ Select/           # Select HTML files
â”‚   â”‚   â”œâ”€â”€ Table/            # Table HTML files
â”‚   â”‚   â”œâ”€â”€ Label/            # Label HTML files
â”‚   â”‚   â”œâ”€â”€ FormContainer/    # Form container HTML files
â”‚   â”‚   â”œâ”€â”€ FieldGroup/       # Field group HTML files
â”‚   â”‚   â”œâ”€â”€ Button/           # Button HTML files
â”‚   â”‚   â””â”€â”€ Toggle/           # Toggle HTML files
â”‚   â”œâ”€â”€ css/
â”‚   â”‚   â”œâ”€â”€ RadioButton/      # Radio button CSS files
â”‚   â”‚   â”œâ”€â”€ Checkbox/         # Checkbox CSS files
â”‚   â”‚   â”œâ”€â”€ Input/            # Input CSS files
â”‚   â”‚   â”œâ”€â”€ Select/           # Select CSS files
â”‚   â”‚   â”œâ”€â”€ Table/            # Table CSS files
â”‚   â”‚   â”œâ”€â”€ Label/            # Label CSS files
â”‚   â”‚   â”œâ”€â”€ FormContainer/    # Form container CSS files
â”‚   â”‚   â”œâ”€â”€ FieldGroup/       # Field group CSS files
â”‚   â”‚   â”œâ”€â”€ Button/           # Button CSS files
â”‚   â”‚   â””â”€â”€ Toggle/           # Toggle CSS files
â”‚   â”œâ”€â”€ javascript/
â”‚   â”‚   â”œâ”€â”€ RadioButton/      # Radio button JS files
â”‚   â”‚   â”œâ”€â”€ Checkbox/         # Checkbox JS files
â”‚   â”‚   â”œâ”€â”€ Input/            # Input JS files
â”‚   â”‚   â”œâ”€â”€ Select/           # Select JS files
â”‚   â”‚   â”œâ”€â”€ Table/            # Table JS files
â”‚   â”‚   â”œâ”€â”€ Label/            # Label JS files
â”‚   â”‚   â”œâ”€â”€ FormContainer/    # Form container JS files
â”‚   â”‚   â”œâ”€â”€ FieldGroup/       # Field group JS files
â”‚   â”‚   â”œâ”€â”€ Button/           # Button JS files
â”‚   â”‚   â””â”€â”€ Toggle/           # Toggle JS files
â”‚   â”œâ”€â”€ logic/
â”‚   â”‚   â”œâ”€â”€ RadioButton/      # Radio button logic files
â”‚   â”‚   â”œâ”€â”€ Checkbox/         # Checkbox logic files
â”‚   â”‚   â”œâ”€â”€ Input/            # Input logic files
â”‚   â”‚   â”œâ”€â”€ Select/           # Select logic files
â”‚   â”‚   â”œâ”€â”€ Table/            # Table logic files
â”‚   â”‚   â”œâ”€â”€ Label/            # Label logic files
â”‚   â”‚   â”œâ”€â”€ FormContainer/    # Form container logic files
â”‚   â”‚   â”œâ”€â”€ FieldGroup/       # Field group logic files
â”‚   â”‚   â”œâ”€â”€ Button/           # Button logic files
â”‚   â”‚   â””â”€â”€ Toggle/           # Toggle logic files
â”‚   â””â”€â”€ functions/
â”‚       â”œâ”€â”€ RadioButton/      # Radio button function files
â”‚       â”œâ”€â”€ Checkbox/         # Checkbox function files
â”‚       â”œâ”€â”€ Input/            # Input function files
â”‚       â”œâ”€â”€ Select/           # Select function files
â”‚       â”œâ”€â”€ Table/            # Table function files
â”‚       â”œâ”€â”€ Label/            # Label function files
â”‚       â”œâ”€â”€ FormContainer/    # Form container function files
â”‚       â”œâ”€â”€ FieldGroup/       # Field group function files
â”‚       â”œâ”€â”€ Button/           # Button function files
â”‚       â””â”€â”€ Toggle/           # Toggle function files
```

**Example 2: User Says "Create Settings Page"**
**Cursor AI Automatically Creates:**

```
src/
â”œâ”€â”€ pages/Settings/           # Main settings page
â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ TextInput/            # Text input component
â”‚   â”œâ”€â”€ NumberInput/          # Number input component
â”‚   â”œâ”€â”€ Checkbox/             # Checkbox component
â”‚   â”œâ”€â”€ RadioButton/          # Radio button component
â”‚   â”œâ”€â”€ Select/               # Select dropdown component
â”‚   â”œâ”€â”€ Toggle/               # Toggle switch component
â”‚   â”œâ”€â”€ Slider/               # Slider component
â”‚   â”œâ”€â”€ ColorPicker/          # Color picker component
â”‚   â”œâ”€â”€ FileUpload/           # File upload component
â”‚   â”œâ”€â”€ Header/               # Page header component
â”‚   â”œâ”€â”€ Sidebar/              # Sidebar navigation component
â”‚   â”œâ”€â”€ ContentArea/          # Content area component
â”‚   â”œâ”€â”€ Footer/               # Page footer component
â”‚   â”œâ”€â”€ Navigation/           # Navigation menu component
â”‚   â”œâ”€â”€ Breadcrumb/           # Breadcrumb component
â”‚   â”œâ”€â”€ Button/               # Action button component
â”‚   â”œâ”€â”€ Modal/                # Confirmation modal component
â”‚   â”œâ”€â”€ Tooltip/              # Help tooltip component
â”‚   â””â”€â”€ Progress/             # Progress indicator component
```

**Example 3: User Says "Add Search Functionality"**
**Cursor AI Automatically Creates:**

```
src/
â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ SearchInput/          # Search input field component
â”‚   â”œâ”€â”€ SearchButton/         # Search button component
â”‚   â”œâ”€â”€ SearchResults/        # Search results container component
â”‚   â”œâ”€â”€ SearchFilters/        # Search filters component
â”‚   â”œâ”€â”€ SearchSuggestions/    # Search suggestions component
â”‚   â”œâ”€â”€ SearchHistory/        # Search history component
â”‚   â”œâ”€â”€ ResultList/           # Result list component
â”‚   â”œâ”€â”€ ResultCard/           # Result card component
â”‚   â”œâ”€â”€ Pagination/           # Pagination component
â”‚   â”œâ”€â”€ SortControl/          # Sorting control component
â”‚   â””â”€â”€ FilterControl/        # Filter control component
```

### Rule 1.1: Chrome Extension File Extension Compliance
- **HTML files**: ALWAYS use `.html` extension
- **CSS files**: ALWAYS use `.css` extension  
- **JavaScript files**: Use `.js` for regular scripts, `.mjs` for ES6 modules
- **Logic files**: Use `.js` for regular logic, `.mjs` for module logic
- **Function files**: Use `.js` for regular functions, `.mjs` for module functions
- **Background scripts**: Use `.js` for regular, `.mjs` for modules (must be referenced in manifest.json)
- **Content scripts**: Use `.js` for regular, `.mjs` for modules (must be referenced in manifest.json)
- **Popup/Options scripts**: Use `.js` for regular, `.mjs` for modules (must be referenced in HTML)

### Rule 1.2: When to Use .js vs .mjs
- **Use .js extension when:**
  - File contains regular JavaScript (no import/export statements)
  - File is a simple utility or helper function
  - File doesn't need to be imported by other files
  - File is loaded directly in HTML without module syntax

- **Use .mjs extension when:**
  - File contains ES6 import/export statements
  - File needs to be imported by other files as a module
  - File is part of a modular architecture
  - File uses modern ES6+ module features

- **Chrome Extension Compliance:**
  - Both .js and .mjs are supported in Chrome 136+
  - Files must be properly referenced in manifest.json
  - No remote code execution allowed
  - All code must be bundled with extension

### Rule 2: SINGLE CLEAR PROJECT STRUCTURE (NEW - CLEANED UP)

**ONE STRUCTURE ONLY - NO CONFUSION - NO DUPLICATES**

```
chrome-extension-project/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ coding/                    # MAIN FILE TYPE SEPARATION WITH SUBDIRECTORIES
â”‚   â”‚   â”œâ”€â”€ html/                 # ALL HTML files organized by component
â”‚   â”‚   â”‚   â”œâ”€â”€ Button/           # Button HTML subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Modal/            # Modal HTML subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Options/          # Options HTML subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Popup/            # Popup HTML subdirectory
â”‚   â”‚   â”‚   â””â”€â”€ ...               # Other component HTML subdirectories
â”‚   â”‚   â”œâ”€â”€ css/                  # ALL CSS files organized by component
â”‚   â”‚   â”‚   â”œâ”€â”€ Button/           # Button CSS subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Modal/            # Modal CSS subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Options/          # Options CSS subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Popup/            # Popup CSS subdirectory
â”‚   â”‚   â”‚   â””â”€â”€ ...               # Other component CSS subdirectories
â”‚   â”‚   â”œâ”€â”€ javascript/           # ALL JavaScript files organized by component
â”‚   â”‚   â”‚   â”œâ”€â”€ Button/           # Button JS subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Modal/            # Modal JS subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Options/          # Options JS subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Popup/            # Popup JS subdirectory
â”‚   â”‚   â”‚   â””â”€â”€ ...               # Other component JS subdirectories
â”‚   â”‚   â”œâ”€â”€ logic/                # ALL Logic files organized by component
â”‚   â”‚   â”‚   â”œâ”€â”€ Button/           # Button logic subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Modal/            # Modal logic subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Options/          # Options logic subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Popup/            # Popup logic subdirectory
â”‚   â”‚   â”‚   â””â”€â”€ ...               # Other component logic subdirectories
â”‚   â”‚   â”œâ”€â”€ functions/            # ALL Function files organized by component
â”‚   â”‚   â”‚   â”œâ”€â”€ Button/           # Button functions subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Modal/            # Modal functions subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Options/          # Options functions subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Popup/            # Popup functions subdirectory
â”‚   â”‚   â”‚   â””â”€â”€ ...               # Other component functions subdirectories
â”‚   â”‚   â”œâ”€â”€ common/               # ALL Shared/common files
â”‚   â”‚   â”œâ”€â”€ types/                # ALL Type definitions
â”‚   â”‚   â””â”€â”€ constants/            # ALL Constants and configuration
â”‚   â”œâ”€â”€ components/               # Reusable UI components (Button, Modal, etc.)
â”‚   â”‚   â”œâ”€â”€ Button/               # Button component directory
â”‚   â”‚   â”œâ”€â”€ Modal/                # Modal component directory
â”‚   â”‚   â”œâ”€â”€ Input/                # Input component directory
â”‚   â”‚   â””â”€â”€ ...                   # Other component directories
â”‚   â”œâ”€â”€ hooks/                    # Custom hooks (useAuth, useFetch, etc.)
â”‚   â”‚   â”œâ”€â”€ useAuth/              # useAuth hook directory
â”‚   â”‚   â”œâ”€â”€ useFetch/             # useFetch hook directory
â”‚   â”‚   â””â”€â”€ ...                   # Other hook directories
â”‚   â”œâ”€â”€ utils/                    # Utility functions (formatDate, calculateSum, etc.)
â”‚   â”‚   â”œâ”€â”€ formatDate/           # formatDate utility directory
â”‚   â”‚   â”œâ”€â”€ calculateSum/         # calculateSum utility directory
â”‚   â”‚   â””â”€â”€ ...                   # Other utility directories
â”‚   â”œâ”€â”€ services/                 # API services and business logic
â”‚   â”‚   â”œâ”€â”€ apiService/           # apiService directory
â”‚   â”‚   â”œâ”€â”€ authService/          # authService directory
â”‚   â”‚   â””â”€â”€ ...                   # Other service directories
â”‚   â”œâ”€â”€ context/                  # Context providers (AuthContext, ThemeContext, etc.)
â”‚   â”‚   â”œâ”€â”€ AuthContext/          # AuthContext directory
â”‚   â”‚   â”œâ”€â”€ ThemeContext/         # ThemeContext directory
â”‚   â”‚   â””â”€â”€ ...                   # Other context directories
â”‚   â”œâ”€â”€ pages/                    # Page components (Popup, Options, etc.)
â”‚   â”‚   â”œâ”€â”€ Popup/                # Popup page directory
â”‚   â”‚   â”œâ”€â”€ Options/              # Options page directory
â”‚   â”‚   â””â”€â”€ ...                   # Other page directories
â”‚   â”œâ”€â”€ background/               # Background service worker
â”‚   â”œâ”€â”€ content/                  # Content scripts
â”‚   â”œâ”€â”€ popup/                    # Popup interface
â”‚   â”œâ”€â”€ options/                  # Options page
â”‚   â””â”€â”€ assets/                   # Static assets (icons, images)
â”œâ”€â”€ docs/                         # Professional documentation
â”œâ”€â”€ scripts/                      # Build and deployment scripts
â”œâ”€â”€ config/                       # Configuration files
â”œâ”€â”€ tests/                        # Testing infrastructure
â”œâ”€â”€ .github/                      # GitHub workflows and templates
â”œâ”€â”€ .vscode/                      # VS Code configuration
â”œâ”€â”€ manifest.json                 # Extension manifest (Manifest V3)
â”œâ”€â”€ package.json                  # Project metadata and scripts
â””â”€â”€ .cursor/rules/                # Cursor AI rules
```
**DUPLICATE STRUCTURE REMOVED - USE THE SINGLE STRUCTURE ABOVE**
```

### Rule 2.1: SINGLE STRUCTURE SUMMARY (NEW - CLEANED UP)

**ONE STRUCTURE ONLY - NO CONFUSION - NO DUPLICATES**

The structure above is the **ONLY** structure Cursor AI should follow. Here's how it works:

#### File Organization Rules:
1. **ALL HTML files** go to `src/coding/html/ComponentName/`
2. **ALL CSS files** go to `src/coding/css/ComponentName/`
3. **ALL JavaScript files** go to `src/coding/javascript/ComponentName/`
4. **ALL Logic files** go to `src/coding/logic/ComponentName/`
5. **ALL Function files** go to `src/coding/functions/ComponentName/`

#### Component Organization Rules:
1. **Each component** gets its own directory in `src/components/ComponentName/`
2. **Each component** gets its own subdirectories in ALL coding folders
3. **Each component** has its own index.mjs export file
4. **Maximum reusability** - every component can be used anywhere

#### Example: Button Component Creates:
```
src/components/Button/                    # Main component directory
src/coding/html/Button/                  # Button HTML files
src/coding/css/Button/                   # Button CSS files
src/coding/javascript/Button/            # Button JS files
src/coding/logic/Button/                 # Button logic files
src/coding/functions/Button/             # Button function files
```

#### Example: Options Page Creates:
```
src/pages/Options/                       # Main page directory
src/coding/html/Options/                 # Options HTML files
src/coding/css/Options/                  # Options CSS files
src/coding/javascript/Options/           # Options JS files
src/coding/logic/Options/                # Options logic files
src/coding/functions/Options/            # Options function files
```

### Rule 3: Automatic File Organization Enforcement
- **When creating ANY component**: Automatically create separate files for HTML, CSS, JS, Logic, Functions
- **When creating ANY hook**: Automatically create separate files for JS, Logic, Functions
- **When creating ANY utility**: Automatically create separate files for JS, Logic, Functions
- **When creating ANY service**: Automatically create separate files for JS, Logic, Functions
- **When creating ANY context**: Automatically create separate files for JS, Logic, Functions
- **When creating ANY page**: Automatically create separate files for HTML, CSS, JS, Logic, Functions
- **When creating ANY modal**: Automatically create separate files for HTML, CSS, JS, Logic, Functions
- **When creating ANY documentation**: Automatically create appropriate docs/ directory structure
- **When creating ANY scripts**: Automatically create appropriate scripts/ directory structure
- **When creating ANY configuration**: Automatically create appropriate config/ directory structure
- **When creating ANY tests**: Automatically create appropriate tests/ directory structure
- **When creating ANY GitHub workflows**: Automatically create .github/ directory structure
- **When creating ANY VS Code config**: Automatically create .vscode/ directory structure
- **When creating ANY function**: Automatically place in appropriate function directory
- **When creating ANY logic**: Automatically place in appropriate logic directory
- **When creating ANY HTML**: Automatically place in appropriate HTML directory
- **When creating ANY CSS**: Automatically place in appropriate CSS directory

### Rule 4: Chrome Extension Structure Requirements
```
src/
â”œâ”€â”€ background/              # Background service worker
â”œâ”€â”€ content/                 # Content scripts
â”œâ”€â”€ popup/                   # Popup interface
â”œâ”€â”€ options/                 # Options page
â”œâ”€â”€ assets/                  # Static assets (icons, images)
â”œâ”€â”€ components/              # Reusable UI components
â”œâ”€â”€ hooks/                   # Custom hooks
â”œâ”€â”€ utils/                   # Utility functions
â”œâ”€â”€ services/                # API services and business logic
â”œâ”€â”€ context/                 # Context providers
â”œâ”€â”€ pages/                   # Page components
â””â”€â”€ manifest.json            # Extension manifest (Manifest V3)
```

## 3. ðŸš¨ **AUTOMATIC STRUCTURE ENFORCEMENT RULES (CRITICAL - 100% COMPLIANCE)**

### Rule 5: Automatic Component Creation Enforcement
- **When user says "create Search component"**: Automatically create:
  - `src/components/Search/` directory
  - `src/coding/html/Search.html` file
  - `src/coding/css/Search.css` file
  - `src/coding/javascript/Search.mjs` file
  - `src/coding/logic/Search.logic.mjs` file
  - `src/coding/functions/Search.functions.mjs` file
  - `src/components/Search/index.mjs` export file

- **When user says "create useAuth hook"**: Automatically create:
  - `src/hooks/useAuth/` directory
  - `src/coding/javascript/useAuth.mjs` file
  - `src/coding/logic/useAuth.logic.mjs` file
  - `src/coding/functions/useAuth.functions.mjs` file
  - `src/hooks/useAuth/index.mjs` export file

- **When user says "create formatDate utility"**: Automatically create:
  - `src/utils/formatDate/` directory
  - `src/coding/javascript/formatDate.mjs` file
  - `src/coding/logic/formatDate.logic.mjs` file
  - `src/coding/functions/formatDate.functions.mjs` file
  - `src/utils/formatDate/index.mjs` export file

- **When user says "create apiService service"**: Automatically create:
  - `src/services/apiService/` directory
  - `src/coding/javascript/apiService.mjs` file
  - `src/coding/logic/apiService.logic.mjs` file
  - `src/coding/functions/apiService.functions.mjs` file
  - `src/services/apiService/index.mjs` export file

- **When user says "create AuthContext context"**: Automatically create:
  - `src/context/AuthContext/` directory
  - `src/coding/javascript/AuthContext.mjs` file
  - `src/coding/logic/AuthContext.logic.mjs` file
  - `src/coding/functions/AuthContext.functions.mjs` file
  - `src/context/AuthContext/index.mjs` export file

- **When user says "create Popup page"**: Automatically create:
  - `src/pages/Popup/` directory
  - `src/coding/html/Popup.html` file
  - `src/coding/css/Popup.css` file
  - `src/coding/javascript/Popup.mjs` file
  - `src/coding/logic/Popup.logic.mjs` file
  - `src/coding/functions/Popup.functions.mjs` file
  - `src/pages/Popup/index.mjs` export file

- **When user says "create Modal modal"**: Automatically create:
  - `src/components/Modal/` directory
  - `src/coding/html/Modal.html` file
  - `src/coding/css/Modal.css` file
  - `src/coding/javascript/Modal.mjs` file
  - `src/coding/logic/Modal.logic.mjs` file
  - `src/coding/functions/Modal.functions.mjs` file
  - `src/components/Modal/index.mjs` export file

### Rule 6: Automatic File Placement Enforcement
- **HTML files**: ALWAYS go to `src/coding/html/`
- **CSS files**: ALWAYS go to `src/coding/css/`
- **JavaScript files**: ALWAYS go to `src/coding/javascript/`
- **Logic files**: ALWAYS go to `src/coding/logic/`
- **Function files**: ALWAYS go to `src/coding/functions/`
- **Common files**: ALWAYS go to `src/coding/common/`
- **Type files**: ALWAYS go to `src/coding/types/`
- **Constant files**: ALWAYS go to `src/coding/constants/`

### Rule 7: Automatic Directory Creation Enforcement
- **If directory doesn't exist**: Automatically create it
- **If file type directory missing**: Automatically create it
- **If component directory missing**: Automatically create it
- **Maintain proper hierarchy**: Always follow the established structure

### Rule 8: Chrome Extension File Enforcement
- **manifest.json**: ALWAYS in root directory
- **Background scripts**: ALWAYS in `src/background/`
- **Content scripts**: ALWAYS in `src/content/`
- **Popup files**: ALWAYS in `src/popup/`
- **Options files**: ALWAYS in `src/options/`
- **Asset files**: ALWAYS in `src/assets/`

### Rule 8.1: Professional Infrastructure File Enforcement
- **Documentation files**: ALWAYS in appropriate `docs/` subdirectories
- **Build scripts**: ALWAYS in appropriate `scripts/build/` subdirectories
- **Deployment scripts**: ALWAYS in appropriate `scripts/deploy/` subdirectories
- **Testing scripts**: ALWAYS in appropriate `scripts/test/` subdirectories
- **Configuration files**: ALWAYS in appropriate `config/` subdirectories
- **Test files**: ALWAYS in appropriate `tests/` subdirectories
- **GitHub workflows**: ALWAYS in `.github/workflows/` directory
- **VS Code config**: ALWAYS in `.vscode/` directory
- **Package scripts**: ALWAYS in `package.json` scripts section
- **Environment files**: ALWAYS in root directory with proper naming

## 4. ðŸš¨ **COMPLETE MODULAR STRUCTURE SUMMARY (CRITICAL - 100% COMPLIANCE)**

### Complete ULTRA-MEGA-MODULAR Chrome Extension Structure
```
chrome-extension-project/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ coding/                    # MAIN FILE TYPE SEPARATION WITH SUBDIRECTORIES
â”‚   â”‚   â”œâ”€â”€ html/                 # ALL HTML files organized by component
â”‚   â”‚   â”‚   â”œâ”€â”€ Button/           # Button HTML subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Modal/            # Modal HTML subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Options/          # Options HTML subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Popup/            # Popup HTML subdirectory
â”‚   â”‚   â”‚   â””â”€â”€ ...               # Other component HTML subdirectories
â”‚   â”‚   â”œâ”€â”€ css/                  # ALL CSS files organized by component
â”‚   â”‚   â”‚   â”œâ”€â”€ Button/           # Button CSS subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Modal/            # Modal CSS subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Options/          # Options CSS subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Popup/            # Popup CSS subdirectory
â”‚   â”‚   â”‚   â””â”€â”€ ...               # Other component CSS subdirectories
â”‚   â”‚   â”œâ”€â”€ javascript/           # ALL JavaScript files organized by component
â”‚   â”‚   â”‚   â”œâ”€â”€ Button/           # Button JS subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Modal/            # Modal JS subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Options/          # Options JS subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Popup/            # Popup JS subdirectory
â”‚   â”‚   â”‚   â””â”€â”€ ...               # Other component JS subdirectories
â”‚   â”‚   â”œâ”€â”€ logic/                # ALL Logic files organized by component
â”‚   â”‚   â”‚   â”œâ”€â”€ Button/           # Button logic subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Modal/            # Modal logic subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Options/          # Options logic subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Popup/            # Popup logic subdirectory
â”‚   â”‚   â”‚   â””â”€â”€ ...               # Other component logic subdirectories
â”‚   â”‚   â”œâ”€â”€ functions/            # ALL Function files organized by component
â”‚   â”‚   â”‚   â”œâ”€â”€ Button/           # Button functions subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Modal/            # Modal functions subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Options/          # Options functions subdirectory
â”‚   â”‚   â”‚   â”œâ”€â”€ Popup/            # Popup functions subdirectory
â”‚   â”‚   â”‚   â””â”€â”€ ...               # Other component functions subdirectories
â”‚   â”‚   â”œâ”€â”€ common/               # ALL Shared/common files
â”‚   â”‚   â”œâ”€â”€ types/                # ALL Type definitions
â”‚   â”‚   â””â”€â”€ constants/            # ALL Constants and configuration
â”‚   â”œâ”€â”€ components/               # Reusable UI components (Button, Modal, etc.)
â”‚   â”‚   â”œâ”€â”€ Button/               # Button component directory
â”‚   â”‚   â”œâ”€â”€ Modal/                # Modal component directory
â”‚   â”‚   â”œâ”€â”€ Input/                # Input component directory
â”‚   â”‚   â””â”€â”€ ...                   # Other component directories
â”‚   â”œâ”€â”€ hooks/                    # Custom hooks (useAuth, useFetch, etc.)
â”‚   â”‚   â”œâ”€â”€ useAuth/              # useAuth hook directory
â”‚   â”‚   â”œâ”€â”€ useFetch/             # useFetch hook directory
â”‚   â”‚   â””â”€â”€ ...                   # Other hook directories
â”‚   â”œâ”€â”€ utils/                    # Utility functions (formatDate, calculateSum, etc.)
â”‚   â”‚   â”œâ”€â”€ formatDate/           # formatDate utility directory
â”‚   â”‚   â”œâ”€â”€ calculateSum/         # calculateSum utility directory
â”‚   â”‚   â””â”€â”€ ...                   # Other utility directories
â”‚   â”œâ”€â”€ services/                 # API services and business logic
â”‚   â”‚   â”œâ”€â”€ apiService/           # apiService directory
â”‚   â”‚   â”œâ”€â”€ authService/          # authService directory
â”‚   â”‚   â””â”€â”€ ...                   # Other service directories
â”‚   â”œâ”€â”€ context/                  # Context providers (AuthContext, ThemeContext, etc.)
â”‚   â”‚   â”œâ”€â”€ AuthContext/          # AuthContext directory
â”‚   â”‚   â”œâ”€â”€ ThemeContext/         # ThemeContext directory
â”‚   â”‚   â””â”€â”€ ...                   # Other context directories
â”‚   â”œâ”€â”€ pages/                    # Page components (Popup, Options, etc.)
â”‚   â”‚   â”œâ”€â”€ Popup/                # Popup page directory
â”‚   â”‚   â”œâ”€â”€ Options/              # Options page directory
â”‚   â”‚   â””â”€â”€ ...                   # Other page directories
â”‚   â”œâ”€â”€ background/               # Background service worker
â”‚   â”œâ”€â”€ content/                  # Content scripts
â”‚   â”œâ”€â”€ popup/                    # Popup interface
â”‚   â”œâ”€â”€ options/                  # Options page
â”‚   â””â”€â”€ assets/                   # Static assets (icons, images)
â”œâ”€â”€ docs/                         # Professional documentation
â”‚   â”œâ”€â”€ api/                      # API documentation
â”‚   â”œâ”€â”€ components/               # Component documentation
â”‚   â”œâ”€â”€ deployment/               # Deployment guides
â”‚   â”œâ”€â”€ development/              # Development guides
â”‚   â”œâ”€â”€ architecture/             # Architecture documentation
â”‚   â””â”€â”€ user-guides/              # User guides and tutorials
â”œâ”€â”€ scripts/                      # Build and deployment scripts
â”‚   â”œâ”€â”€ build/                    # Build scripts
â”‚   â”œâ”€â”€ deploy/                   # Deployment scripts
â”‚   â”œâ”€â”€ test/                     # Testing scripts
â”‚   â””â”€â”€ utils/                    # Script utilities
â”œâ”€â”€ config/                       # Configuration files
â”‚   â”œâ”€â”€ webpack/                  # Webpack configuration
â”‚   â”œâ”€â”€ babel/                    # Babel configuration
â”‚   â”œâ”€â”€ eslint/                   # ESLint configuration
â”‚   â”œâ”€â”€ prettier/                 # Prettier configuration
â”‚   â””â”€â”€ javascript/               # JavaScript configuration
â”œâ”€â”€ tests/                        # Testing infrastructure
â”‚   â”œâ”€â”€ unit/                     # Unit tests
â”‚   â”œâ”€â”€ integration/              # Integration tests
â”‚   â”œâ”€â”€ e2e/                      # End-to-end tests
â”‚   â””â”€â”€ fixtures/                 # Test fixtures and mocks
â”œâ”€â”€ .github/                      # GitHub workflows and templates
â”‚   â”œâ”€â”€ workflows/                # CI/CD workflows
â”‚   â”œâ”€â”€ ISSUE_TEMPLATE/           # Issue templates
â”‚   â””â”€â”€ PULL_REQUEST_TEMPLATE.md  # PR template
â”œâ”€â”€ .vscode/                      # VS Code configuration
â”‚   â”œâ”€â”€ extensions.json            # Recommended extensions
â”‚   â”œâ”€â”€ settings.json             # Workspace settings
â”‚   â””â”€â”€ launch.json               # Debug configuration
â”œâ”€â”€ manifest.json                 # Extension manifest (Manifest V3)
â”œâ”€â”€ package.json                  # Project metadata and scripts
â”œâ”€â”€ jsconfig.json                  # JavaScript configuration
â”œâ”€â”€ webpack.config.js             # Webpack build configuration
â”œâ”€â”€ .eslintrc.js                  # ESLint configuration
â”œâ”€â”€ .prettierrc                   # Prettier configuration
â”œâ”€â”€ .gitignore                    # Git ignore patterns
â”œâ”€â”€ .env.example                  # Environment variables template
â”œâ”€â”€ README.md                     # Project overview and setup
â”œâ”€â”€ CHANGELOG.md                  # Version history and changes
â”œâ”€â”€ CONTRIBUTING.md               # Contribution guidelines
â”œâ”€â”€ LICENSE                       # Project license
â””â”€â”€ .cursor/rules/                # Cursor AI rules
```

### Automatic Creation Examples
- **"create Button component"** â†’ Creates Button directory + HTML/CSS/JS/Logic/Functions files
- **"create Modal component"** â†’ Creates Modal directory + HTML/CSS/MJS/Logic/Functions files (ES6 modules)
- **"create useAuth hook"** â†’ Creates useAuth directory + JS/Logic/Functions files (regular scripts)
- **"create useFetch hook"** â†’ Creates useFetch directory + MJS/Logic/Functions files (ES6 modules)
- **"create formatDate utility"** â†’ Creates formatDate directory + JS/Logic/Functions files (regular scripts)
- **"create apiService service"** â†’ Creates apiService directory + MJS/Logic/Functions files (ES6 modules)
- **"create AuthContext context"** â†’ Creates AuthContext directory + MJS/Logic/Functions files (ES6 modules)
- **"create Popup page"** â†’ Creates Popup directory + HTML/CSS/JS/Logic/Functions files (regular scripts)
- **"create Options page"** â†’ Creates Options directory + HTML/CSS/MJS/Logic/Functions files (ES6 modules)

- **"create API documentation"** â†’ Creates docs/api/ structure + documentation files
- **"create component docs"** â†’ Creates docs/components/ structure + documentation files
- **"create deployment guide"** â†’ Creates docs/deployment/ structure + deployment guides
- **"create development guide"** â†’ Creates docs/development/ structure + development guides
- **"create architecture docs"** â†’ Creates docs/architecture/ structure + architecture documentation
- **"create user guides"** â†’ Creates docs/user-guides/ structure + user guides
- **"create build scripts"** â†’ Creates scripts/build/ structure + build scripts
- **"create deployment scripts"** â†’ Creates scripts/deploy/ structure + deployment scripts
- **"create testing scripts"** â†’ Creates scripts/test/ structure + testing scripts
- **"create webpack config"** â†’ Creates config/webpack/ structure + webpack configuration
- **"create babel config"** â†’ Creates config/babel/ structure + babel configuration
- **"create eslint config"** â†’ Creates config/eslint/ structure + eslint configuration
- **"create prettier config"** â†’ Creates config/prettier/ structure + prettier configuration
- **"create typescript config"** â†’ Creates config/typescript/ structure + typescript configuration
- **"create unit tests"** â†’ Creates tests/unit/ structure + unit test files
- **"create integration tests"** â†’ Creates tests/integration/ structure + integration test files
- **"create e2e tests"** â†’ Creates tests/e2e/ structure + end-to-end test files
- **"create GitHub workflows"** â†’ Creates .github/workflows/ structure + CI/CD workflows
- **"create VS Code config"** â†’ Creates .vscode/ structure + VS Code configuration

### Rule 5.1: Professional Infrastructure Creation Enforcement
- **When user says "create API documentation"**: Automatically create:
  - `docs/api/` directory
  - `docs/api/README.md` file
  - `docs/api/endpoints.md` file
  - `docs/api/examples.md` file

- **When user says "create build scripts"**: Automatically create:
  - `scripts/build/` directory
  - `scripts/build/build.js` file
  - `scripts/build/build.prod.js` file
  - `scripts/build/build.dev.js` file

- **When user says "create deployment scripts"**: Automatically create:
  - `scripts/deploy/` directory
  - `scripts/deploy/deploy.js` file
  - `scripts/deploy/deploy.prod.js` file
  - `scripts/deploy/deploy.dev.js` file

- **When user says "create webpack config"**: Automatically create:
  - `config/webpack/` directory
  - `config/webpack/webpack.common.js` file
  - `config/webpack/webpack.dev.js` file
  - `config/webpack/webpack.prod.js` file

- **When user says "create unit tests"**: Automatically create:
  - `tests/unit/` directory
  - `tests/unit/setup.js` file
  - `tests/unit/helpers.js` file
  - `tests/unit/index.js` file

- **When user says "create GitHub workflows"**: Automatically create:
  - `.github/workflows/` directory
  - `.github/workflows/ci.yml` file
  - `.github/workflows/deploy.yml` file
  - `.github/workflows/release.yml` file

## 6. ðŸš¨ **FINAL STRUCTURE ENFORCEMENT RULES (CRITICAL - 100% COMPLIANCE)**

### Rule 9: Mandatory Structure Compliance
- **NEVER create files outside designated directories**
- **NEVER mix file types in single directories**
- **NEVER skip component directory creation**
- **ALWAYS follow the established structure exactly**
- **ALWAYS create all required files for components**

### Rule 10: Automatic Structure Validation
- **Before creating any file**: Validate it goes to correct directory
- **Before creating any component**: Validate all required files are created
- **Before creating any directory**: Validate it follows the structure
- **After any creation**: Verify structure compliance

### Rule 11: Structure Violation Prevention
- **If structure violation detected**: STOP and correct immediately
- **If wrong directory used**: Move file to correct location
- **If missing files**: Create all required files
- **If structure broken**: Restore proper organization

## 5. Code Generation Rules (CRITICAL - 100% Compliance)

### Preventing Complete File Rewrites

#### When Complete Rewrites Are NOT Allowed
- **Existing files** - never rewrite entire files unless specifically requested
- **Working code** - preserve existing functionality and only modify what's needed
- **Large files** - break changes into smaller, focused modifications
- **Production code** - maintain stability and only change what's necessary

#### Incremental Change Strategy
- **Identify specific lines** that need modification
- **Use Cursor AI editor** for targeted changes
- **Preserve context** around modified sections
- **Add new code** without removing working existing code
- **Document changes** clearly for future reference

#### Implementation Guidelines
- **For new features**: Show only the new code to add
- **For modifications**: Use `// ... existing code ...` to indicate unchanged parts
- **For deletions**: Clearly mark what to remove
- **For file creation**: Provide minimal boilerplate + specific additions

#### Response Format Examples
```typescript
// Add this function to the existing class
public newMethod(): void {
    // Implementation here
}

// ... existing code ...

// Replace this line
- oldCode();
+ newCode();
```

#### Benefits
- **Eliminates token waste** from unnecessary code
- **Prevents network timeouts** and errors
- **Improves response clarity** and focus
- **Enables faster iteration** and development
- **Reduces confusion** about what actually changed

## 3. ðŸš¨ **NEW CRITICAL ENFORCEMENT RULES**

### Rule 5: File Size Detection
- **Before making changes**: Check file size and line count
- **If file > 100 lines**: Use incremental changes only
- **If file > 500 lines**: Break into multiple small changes
- **If file > 1000 lines**: Use Cursor AI editor with incremental changes only

### Rule 6: Change Scope Limitation
- **Maximum change scope**: 50 lines per change
- **Multiple changes**: Break into separate operations
- **Large modifications**: Use iterative approach
- **File rewrites**: NEVER allowed without explicit permission

### Rule 7: Context Preservation
- **Show surrounding context**: 2-3 lines before and after changes
- **Use line numbers**: Reference specific line numbers for changes
- **Maintain file structure**: Don't break existing organization
- **Preserve imports**: Keep all existing import statements

### Rule 8: Change Documentation
- **Document every change**: What was changed and why
- **Use clear markers**: `// ADD:`, `// REPLACE:`, `// REMOVE:`
- **Reference line numbers**: Always specify where changes go
- **Explain purpose**: Why the change is needed

## 4. ðŸš¨ **ANTI-REWRITE ENFORCEMENT MECHANISMS**

### Mechanism 1: File Existence Check
```bash
# ALWAYS check if file exists before suggesting changes
if [ -f "filename.mjs" ]; then
    echo "File exists - use incremental changes only"
    echo "NEVER rewrite entire file"
else
    echo "New file - provide minimal boilerplate + specific additions"
fi
```

### Mechanism 2: Change Size Validation
```bash
# Validate change size before applying
change_lines=$(echo "$proposed_change" | wc -l)
if [ "$change_lines" -gt 50 ]; then
    echo "Change too large - break into smaller parts"
    echo "Maximum allowed: 50 lines per change"
fi
```

### Mechanism 3: File Rewrite Prevention
```bash
# Prevent file rewrites
if [[ "$proposed_change" == *"entire file"* ]] || [[ "$proposed_change" == *"complete rewrite"* ]]; then
    echo "ðŸš¨ FILE REWRITE DETECTED - STOP IMMEDIATELY"
    echo "Use incremental changes only"
    exit 1
fi
```

## 5. ðŸš¨ **MINIMAL CHANGE EXAMPLES**

### Example 1: Adding a Function
```javascript
// ADD: New function after line 45
// ... existing code ...

/**
 * Validates user input data
 * @param {Object} data - User input data
 * @returns {boolean} - Validation result
 */
function validateUserData(data) {
    return data && typeof data === 'object' && data.name && data.email;
}

// ... existing code ...
```

### Example 2: Modifying Existing Code
```javascript
// REPLACE: Lines 23-25
- const oldValidation = checkData(userInput);
- if (oldValidation) {
-     processData(userInput);
+ const isValid = validateUserData(userInput);
+ if (isValid) {
+     processUserData(userInput);
```

### Example 3: Adding Import Statement
```javascript
// ADD: Import statement at line 3
import { validateUserData } from './validation.mjs';
// ... existing code ...
```

### Example 4: Removing Code
```javascript
// REMOVE: Lines 67-70 (deprecated function)
- /**
-  * @deprecated Use validateUserData instead
-  */
- function oldValidation() {
-     // Deprecated implementation
- }
```

## 6. ðŸš¨ **RULE VIOLATION PENALTIES (ENFORCED)**

### Penalties for File Rewrites
- **File Rewrite Violation**: If Cursor AI rewrites entire files
  - **Penalty**: Must immediately stop and use incremental changes
  - **Verification**: Must prove only specific lines were changed
  - **Documentation**: Must document the violation and correction

### Penalties for Large Changes
- **Large Change Violation**: If Cursor AI makes changes > 50 lines
  - **Penalty**: Must break into smaller, focused changes
  - **Verification**: Must prove changes are under 50 lines each
  - **Documentation**: Must document the violation and correction

### Penalties for Context Loss
- **Context Loss Violation**: If Cursor AI loses file context
  - **Penalty**: Must reread file and regain context
  - **Verification**: Must prove context understanding
  - **Documentation**: Must document the violation and correction

## 7. ðŸš¨ **RULE TESTING MECHANISM**

### Test 1: File Rewrite Prevention
```bash
echo "ðŸŽ¯ TESTING FILE REWRITE PREVENTION..."
echo "If Cursor AI rewrites entire files, rule violation detected"
echo "Expected: Only specific changes shown"
echo "Actual: Check response for complete file content"
```

### Test 2: Change Size Validation
```bash
echo "ðŸŽ¯ TESTING CHANGE SIZE VALIDATION..."
echo "If Cursor AI shows changes > 50 lines, rule violation detected"
echo "Expected: Changes under 50 lines each"
echo "Actual: Count lines in proposed changes"
```

### Test 3: Context Preservation
```bash
echo "ðŸŽ¯ TESTING CONTEXT PRESERVATION..."
echo "If Cursor AI loses file context, rule violation detected"
echo "Expected: Clear reference to existing code structure"
echo "Actual: Check for context markers and line numbers"
```

## 8. ðŸš¨ **EMERGENCY PROCEDURES**

### If File Rewrite is Detected
1. **STOP immediately** - don't continue with rewrite
2. **Switch to incremental changes** - show only what needs to change
3. **Use Cursor AI editor** - target specific lines only
4. **Preserve existing code** - don't remove working functionality
5. **Document the violation** - record what went wrong

### If Large Changes are Detected
1. **Break into smaller parts** - maximum 50 lines per change
2. **Use iterative approach** - one change at a time
3. **Maintain context** - show surrounding code for each change
4. **Verify each change** - ensure it's focused and specific
5. **Document the process** - explain how changes were broken down

### If Context is Lost
1. **Reread the file** - regain understanding of structure
2. **Use line numbers** - reference specific locations
3. **Show surrounding code** - provide context for changes
4. **Explain relationships** - how changes fit into existing code
5. **Verify understanding** - confirm context is restored

## 9. Benefits of Minimal Change Approach

### Performance Benefits
- **Faster response times** - no unnecessary code generation
- **Reduced token usage** - focus on what actually needs to change
- **Better network performance** - smaller responses, fewer timeouts
- **Improved reliability** - less chance of generation errors

### Development Benefits
- **Clearer changes** - easy to see what was modified
- **Better version control** - focused commits with clear purposes
- **Easier debugging** - changes are isolated and specific
- **Faster iteration** - quick changes without full file processing

### Maintenance Benefits
- **Preserved functionality** - existing code remains intact
- **Reduced risk** - smaller changes are less likely to break things
- **Better documentation** - clear record of what changed and why
- **Easier rollback** - specific changes can be undone individually

## 10. Implementation Checklist

### Before Making Any Changes
- [ ] **File exists check** - is this a new file or existing file?
- [ ] **File size assessment** - how many lines does the file have?
- [ ] **Change scope planning** - what specific lines need modification?
- [ ] **Context understanding** - what surrounds the areas to change?
- [ ] **Incremental approach** - can this be broken into smaller changes?

### During Change Implementation
- [ ] **Use specific line numbers** - reference exact locations
- [ ] **Show surrounding context** - 2-3 lines before and after
- [ ] **Use clear markers** - ADD, REPLACE, REMOVE
- [ ] **Preserve existing code** - don't remove unless explicitly told
- [ ] **Document changes** - explain what and why

### After Change Implementation
- [ ] **Verify change size** - ensure under 50 lines
- [ ] **Check context preservation** - ensure surrounding code intact
- [ ] **Document violations** - if any rules were broken
- [ ] **Provide rollback info** - how to undo if needed
- [ ] **Confirm completion** - verify all requested changes made

## 11. ðŸš¨ **STRICT PENALTY ENFORCEMENT (NEW - CRITICAL)**

### Penalty Levels (ESCALATING)
- **First Violation**: Warning + immediate correction required
- **Second Violation**: 24-hour suspension from code generation operations
- **Third Violation**: Complete task restart with user supervision
- **Fourth Violation**: User must manually approve all future code generation operations

### Specific Penalties for Each Violation Type

#### Project Structure Violation Penalties
- **Immediate Action**: STOP all code generation operations
- **Required Correction**: Follow single clear structure immediately
- **Verification**: Must prove correct project structure
- **Documentation**: Must document violation and correction
- **User Notification**: Alert user immediately of violation

#### File Organization Violation Penalties
- **Immediate Action**: STOP all file operations
- **Required Correction**: Organize files correctly immediately
- **Verification**: Must prove proper file organization
- **Documentation**: Must document violation and correction
- **Organization Audit**: Must audit all file organization

#### Component Creation Violation Penalties
- **Immediate Action**: STOP all component operations
- **Required Correction**: Create components with proper structure immediately
- **Verification**: Must prove proper component structure
- **Documentation**: Must document violation and correction
- **Component Audit**: Must audit all component creation

### Penalty Enforcement Commands
```bash
# Penalty enforcement verification
echo "ðŸš¨ CODE GENERATION PENALTY ENFORCEMENT VERIFICATION"
echo "Checking for code generation violations..."

# Check for wrong project structure
if grep -q "wrong.*structure\|incorrect.*organization" task_execution.log | grep -v "correct.*structure"; then
    echo "ðŸš¨ PROJECT STRUCTURE VIOLATION DETECTED"
    echo "Penalty: Immediate code generation suspension"
    echo "Required: Follow single clear structure"
fi

# Check for wrong file organization
if grep -q "wrong.*directory\|incorrect.*placement" task_execution.log | grep -v "correct.*organization"; then
    echo "ðŸš¨ FILE ORGANIZATION VIOLATION DETECTED"
    echo "Penalty: Immediate file operation suspension"
    echo "Required: Organize files correctly"
fi

# Check for wrong component creation
if grep -q "missing.*component.*structure\|incomplete.*component" task_execution.log | grep -v "proper.*component.*structure"; then
    echo "ðŸš¨ COMPONENT CREATION VIOLATION DETECTED"
    echo "Penalty: Immediate component operation suspension"
    echo "Required: Create components with proper structure"
fi
```

### Emergency Penalty Procedures
1. **Immediate Violation Detection**: Stop all code generation operations
2. **User Notification**: Alert user of violation immediately
3. **Penalty Application**: Apply appropriate penalty level
4. **Correction Required**: Must correct violation before continuing
5. **Verification**: Must prove correction was successful
6. **Documentation**: Must document violation and correction
7. **User Approval**: Must get user approval to resume

## Conclusion

These strengthened code generation rules ensure that Cursor AI NEVER rewrites entire files and ALWAYS uses minimal, incremental changes. The new enforcement mechanisms prevent file rewrites, limit change scope, and maintain code context. 

**Remember: NEVER rewrite files, ONLY show specific changes, preserve existing code always!**

## Rule Verification Status

- **File rewrite prevention**: âœ… ENFORCED
- **Change size limits**: âœ… ENFORCED  
- **Context preservation**: âœ… ENFORCED
- **Incremental approach**: âœ… ENFORCED
- **Rule violations**: âœ… PENALIZED

**Status: ALL ANTI-REWRITE RULES ACTIVE - FILE REWRITES PREVENTED**


These code generation and project structure rules ensure that Cursor AI creates maintainable, reusable code with proper organization and no duplication. The strict project structure and import strategy maximize reusability and maintainability.

**Remember: No mixed concerns, no code duplication, proper file extensions always!**
