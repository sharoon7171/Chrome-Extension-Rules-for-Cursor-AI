---
description: Terminal verification rules to ensure Cursor AI always uses terminal commands for perfect verification of changes, removals, and additions with .mjs module support
globs: ['**/*']
alwaysApply: true
---

# Terminal Verification Rules

## Core Principle
- **ALWAYS use terminal commands** for verification of any changes, removals, or additions
- **Terminal verification is the perfect way** to ensure tasks are completed without missing anything
- **Never rely on assumptions** - always verify through actual execution
- **Terminal commands provide definitive proof** that changes work correctly
- **Verify .mjs module functionality** in Chrome extension context
- **Verify file extensions** to prevent .mjs misuse

## Mandatory Terminal Verification

### For Code Changes
- **Test execution**: Run code to verify it works as expected
- **Syntax checking**: Use language-specific linters and compilers
- **Dependency verification**: Check imports and package requirements
- **Build verification**: Ensure projects compile and build successfully
- **Module verification**: Test .mjs import/export functionality
- **File extension validation**: Verify .mjs is only used for JavaScript modules

### For File Operations
- **File existence**: Use `ls`, `find`, or `stat` commands to verify files exist
- **File content**: Use `cat`, `head`, `tail` to verify file contents
- **File permissions**: Use `ls -la` to check file permissions
- **Directory structure**: Use `tree` or `ls -R` to verify folder organization
- **Module file verification**: Check .mjs files for proper syntax and structure
- **File type verification**: Ensure .mjs is only used for JavaScript modules

### For Project Status
- **Git status**: Use `git status`, `git log`, `git diff` for repository verification
- **Package management**: Use `npm list`, `pip list`, `composer show` for dependencies
- **Environment verification**: Check versions with `node -v`, `python --version`, etc.
- **Process verification**: Use `ps`, `top`, or service status commands
- **Module compatibility**: Verify .mjs modules work in target environment
- **File extension audit**: Check all files use correct extensions

## Terminal Verification Process

### Before Any Change
1. **Plan verification commands** that will prove the change worked
2. **Document expected outcomes** for each verification step
3. **Prepare rollback commands** in case verification fails
4. **Ask user approval** for both the change and verification plan
5. **Plan module verification** for .mjs file changes
6. **Plan file extension verification** to prevent .mjs misuse

### During Implementation
1. **Execute changes systematically** with immediate verification
2. **Run verification commands** after each significant step
3. **Document actual results** vs expected outcomes
4. **Stop immediately** if verification shows any issues
5. **Verify module syntax** after .mjs file changes
6. **Verify file extensions** after any file creation

### After Implementation
1. **Run comprehensive verification suite** using terminal commands
2. **Test all affected functionality** through terminal execution
3. **Verify no side effects** by checking related systems
4. **Document verification results** for user review
5. **Test .mjs module functionality** in Chrome extension context
6. **Verify file extensions** to prevent .mjs misuse
7. **Ask for final user confirmation** based on verification results

## Essential Terminal Commands by Category

### Code Execution and Testing
```bash
# JavaScript/Node.js with .mjs support
node script.mjs
node --check script.mjs
npm test
npm run build
npm audit

# .mjs module verification
find . -name "*.mjs" -exec node --check {} \;
node -e "import('./path/to/module.mjs').catch(console.error)"

# Python
python script.py
python -m pytest
pip install -r requirements.txt
python -m py_compile file.py

# General
make
./configure && make && make test
```

### Module System Verification
```bash
# Check .mjs file syntax
find . -name "*.mjs" -exec node --check {} \;

# Verify import/export syntax
grep -r "import\|export" --include="*.mjs" .

# Test module loading
node -e "import('./module.mjs').then(m => console.log('Module loaded:', m)).catch(console.error)"

# Check for module compatibility issues
grep -r "require\|module.exports" --include="*.mjs" .

# Verify ES6+ module features
grep -r "import.*with" --include="*.mjs" .
```

### File Extension Validation
```bash
# Check for incorrect .mjs file usage
find . -name "*.mjs" -exec file {} \; | grep -v "JavaScript"

# Verify HTML files don't have .mjs extension
find . -name "*.mjs" -exec grep -l "<!DOCTYPE\|<html\|<head\|<body" {} \;

# Verify CSS files don't have .mjs extension
find . -name "*.mjs" -exec grep -l "color\|background\|margin\|padding" {} \;

# Verify JSON files don't have .mjs extension
find . -name "*.mjs" -exec grep -l "^\s*[{\[]" {} \;

# Check for proper file extensions
ls -la *.html *.css *.json *.mjs 2>/dev/null || echo "No files found"

# Verify .mjs files are actually JavaScript modules
find . -name "*.mjs" -exec sh -c 'if ! grep -q "import\|export" "$1"; then echo "WARNING: $1 may not be a valid JavaScript module"; fi' _ {} \;
```

### File System Verification
```bash
# File operations including .mjs files
ls -la filename.mjs
find . -name "*.mjs" -o -name "*.js" -o -name "*.html" -o -name "*.css"
stat filename.mjs
du -sh directory/

# Content verification
cat filename.mjs
head -n 10 filename.mjs
tail -f logfile
diff file1.mjs file2.mjs

# Module file structure verification
find . -name "*.mjs" -exec echo "=== {} ===" \; -exec head -5 {} \;
```

### Chrome Extension Verification
```bash
# Check extension manifest
cat manifest.json | jq '.'

# Verify service worker files
ls -la background.js service-worker.js 2>/dev/null || echo "Service worker files not found"

# Check for .mjs module usage in extension
find . -name "*.mjs" -exec echo "Found .mjs file: {}" \;

# Verify module script tags in HTML
grep -r "type=\"module\"" --include="*.html" .

# Check for remote code execution
grep -r "eval\|Function\|setTimeout.*string" --include="*.js" --include="*.mjs" .

# Verify CSP implementation
grep -r "Content-Security-Policy" --include="*.html" .

# Verify content scripts are NOT .mjs (Chrome limitation)
find . -name "*.mjs" -exec grep -l "chrome.tabs\|chrome.runtime\|document.body" {} \;
```

### Git and Version Control
```bash
# Repository status
git status
git log --oneline -10
git diff
git branch -a

# Verification
git fsck
git remote -v
git config --list

# Check for .mjs file changes
git diff --name-only | grep "\.mjs$"
git log --oneline --follow -- path/to/file.mjs

# Check for file extension changes
git diff --name-only | grep -E "\.(html|css|json|mjs)$"
```

### Dependencies and Environment
```bash
# Package managers
npm list
pip list
composer show
gem list

# Environment
echo $PATH
printenv
which node
node --version

# Module environment verification
node -e "console.log('Node.js version:', process.version)"
node -e "console.log('ES modules supported:', typeof import !== 'undefined')"

# Check for file type support
file --mime-type *.mjs *.js *.html *.css *.json
```

## Verification Success Criteria

### Must Verify These Aspects
- **Code executes without errors** - run and test all modified code
- **All dependencies are satisfied** - check imports and requirements
- **Build processes complete successfully** - compile and package
- **No syntax or linting errors** - use appropriate checkers
- **File operations completed correctly** - verify file states
- **Git operations succeeded** - check repository status
- **Environment is properly configured** - verify system state
- **.mjs modules load correctly** - test import/export functionality
- **Chrome extension compatibility** - verify modules work in extension context
- **File extensions are correct** - .mjs only for JavaScript modules

### Module-Specific Verification
- **ES6+ syntax validation** - all .mjs files pass node --check
- **Import/export functionality** - modules can be imported and used
- **Chrome extension context** - modules work in extension environment
- **No CommonJS syntax** - verify no require() or module.exports
- **Proper file extensions** - all JavaScript modules use .mjs
- **File type validation** - .mjs files contain only JavaScript code

### File Extension Verification
- **HTML files use .html** - never .mjs
- **CSS files use .css** - never .mjs
- **JSON files use .json** - never .mjs
- **JavaScript modules use .mjs** - when using import/export
- **Regular scripts use .js** - when not using modules
- **Content scripts use .js** - Chrome limitation, cannot use .mjs

### Verification Failure Response
- **Stop all operations immediately** if verification fails
- **Report exact terminal output** showing the failure
- **Provide specific error analysis** based on terminal results
- **Suggest corrective actions** with terminal commands
- **Check module compatibility** if .mjs verification fails
- **Check file extensions** if .mjs misuse is detected
- **Ask user for guidance** before proceeding

## Chrome Extension Module Verification

### Before Module Changes
1. **Verify current module structure** - check existing .mjs files
2. **Test module loading** - ensure current modules work
3. **Check Chrome extension context** - verify extension compatibility
4. **Plan verification steps** - document how to test changes
5. **Verify file types** - ensure .mjs is only used for JavaScript

### During Module Implementation
1. **Test syntax immediately** - use node --check after each change
2. **Verify import/export** - test module loading in terminal
3. **Check extension context** - ensure modules work in Chrome extension
4. **Document any issues** - note compatibility problems
5. **Verify file extensions** - ensure .mjs is only used for JavaScript

### After Module Changes
1. **Comprehensive module testing** - verify all .mjs files work
2. **Extension integration test** - test modules in extension context
3. **Performance verification** - check module loading performance
4. **Compatibility verification** - ensure works across different environments
5. **File extension audit** - verify .mjs is only used for JavaScript modules

## Benefits
- **100% accuracy** - terminal commands provide definitive proof
- **Complete verification** - nothing is missed or assumed
- **Immediate feedback** - know instantly if changes work
- **Debugging information** - terminal output shows exact issues
- **Module compatibility** - verify .mjs files work correctly
- **Chrome extension compliance** - ensure modules work in extension context
- **File extension validation** - prevent .mjs misuse
- **Confidence** - verified changes are guaranteed to work
- **Professional approach** - industry standard verification practices
- **Future-proof verification** - support for latest JavaScript features
- **Prevent Chrome extension errors** - avoid .mjs misuse in content scripts