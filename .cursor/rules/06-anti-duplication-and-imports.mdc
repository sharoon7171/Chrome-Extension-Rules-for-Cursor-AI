---
description: Anti-duplication rules to prevent code duplication and ensure proper imports and project structure with .mjs module support
globs: ['**/*']
alwaysApply: true
---

# Anti-Duplication and Import Management Rules

## Core Principle
- **NEVER duplicate code** - Always check if functionality exists elsewhere
- **Use imports and references** to existing code instead of copying
- **Verify before applying changes** to prevent creating duplicates
- **Maintain single source of truth** for all functionality
- **Support .mjs file extensions** for ES6+ module imports

## ⚠️ CRITICAL .mjs File Usage Rules (Chrome Extensions)

### ✅ ALLOWED .mjs Files in Chrome Extensions
- **Background service workers** - when manifest.json specifies `"type": "module"`
- **Popup/options page scripts** - when HTML uses `type="module"`
- **Utility modules** - shared functionality between scripts
- **Type definition files** - when using TypeScript with .mjs
- **Any JavaScript file with import/export statements**

### ❌ NOT ALLOWED .mjs Files in Chrome Extensions
- **Content scripts** - Chrome does NOT support ES modules in content scripts
- **HTML files** - must use .html extension
- **CSS files** - must use .css extension
- **JSON files** - must use .json extension
- **Image files** - must use appropriate image extensions (.png, .jpg, .svg, etc.)
- **Configuration files** - manifest.json, package.json, etc.
- **Documentation files** - README files, markdown files
- **Build tool configs** - webpack.config.js, babel.config.js, etc.
- **Any non-JavaScript files** - .mjs is ONLY for ES6+ modules

### Chrome Extension File Requirements
```
✅ CORRECT:
- background.mjs          # Background service worker with ES6+ modules
- popup.mjs               # Popup script with import/export
- utils.mjs               # Utility functions module
- types.mjs               # TypeScript type definitions

❌ INCORRECT:
- content-script.mjs      # Content scripts cannot use ES modules
- popup.html.mjs          # HTML should be .html
- styles.css.mjs          # CSS should be .css
- config.json.mjs         # JSON should be .json
- README.md.mjs           # Documentation should be .md
- manifest.json.mjs       # Extension manifest must be .json
```

## Code Duplication Prevention

### Before Writing New Code
- **Search existing codebase** for similar functionality
- **Check if function/component already exists** in another location
- **Verify if utility function is available** in utils directory
- **Look for existing constants** in config/constants files
- **Search for .mjs modules** that might provide needed functionality
- **Verify file types** - ensure .mjs is only used for JavaScript modules

### When Duplication is Found
- **Use imports** to reference existing code
- **Update import paths** if code needs to be moved
- **Refactor existing code** to be more reusable if needed
- **Create shared utilities** for common functionality
- **Convert to .mjs modules** if using older JavaScript syntax
- **Verify file extensions** - ensure .mjs is only used for JavaScript

## Import and Project Structure Guidelines

### Import Best Practices
- **Use relative imports** for project files (e.g., `../utils/helpers.mjs`)
- **Use absolute imports** for core modules (e.g., `@/components/Button`)
- **Group imports logically**: External libraries, internal modules, relative files
- **Maintain clean import statements** with proper organization
- **Use .mjs extensions** for all ES6+ module imports
- **Support import attributes** for enhanced module functionality (ES2025+)
- **Verify file types** - ensure .mjs is only used for JavaScript modules

### Project Structure for Imports
```
project/
├── components/     # Reusable UI components
│   ├── Button/
│   │   ├── Button.mjs
│   │   ├── Button.css
│   │   └── index.mjs      # Export file
├── utils/          # Utility functions
│   ├── validation.mjs
│   ├── helpers.mjs
│   └── index.mjs          # Export file
├── constants/      # Shared constants
│   ├── api.mjs
│   ├── config.mjs
│   └── index.mjs          # Export file
└── pages/          # Page components
    └── Home/
        ├── Home.mjs
        └── Home.css
```

### ES6+ Module Import Patterns
```javascript
// ✅ GOOD: Standard ES6+ imports
import { ComponentName } from './component-name.component.mjs';
import { ServiceName } from '../services/service-name.service.mjs';
import { API_ENDPOINTS } from '../constants/api.constants.mjs';

// ✅ GOOD: Default imports
import ComponentName from './component-name.component.mjs';
import ServiceName from '../services/service-name.service.mjs';

// ✅ GOOD: Namespace imports
import * as Utils from '../utils/helpers.mjs';

// ✅ GOOD: Import with attributes (ES2025+)
import data from './data.json' with { type: 'json' };
import config from './config.mjs' with { type: 'module' };

// ❌ BAD: Old CommonJS syntax
const ComponentName = require('./component-name.component.js');

// ❌ BAD: Wrong file extensions
import { ComponentName } from './component-name.component.js';  // Should be .mjs
import styles from './styles.css.mjs';                         // CSS should be .css
```

## Verification Process

### Before Applying Changes
1. **Search existing codebase** for similar functionality
2. **Check import statements** to see what's already available
3. **Verify project structure** to understand where code should live
4. **Update existing code** instead of creating duplicates
5. **Use proper imports** to reference existing functionality
6. **Verify .mjs compatibility** with Chrome extension environment
7. **Verify file types** - ensure .mjs is only used for JavaScript modules

### Code Organization Rules
- **Single responsibility**: Each file/function has one clear purpose
- **DRY principle**: Don't Repeat Yourself - extract common functionality
- **Import over copy**: Always import existing code instead of duplicating
- **Centralized utilities**: Common functions belong in utils directory
- **Shared constants**: Constants belong in constants directory
- **ES6+ module syntax**: Use .mjs files with import/export statements
- **Correct file extensions**: .mjs only for JavaScript modules

## Implementation Examples

### Good Practice - Using Imports
```javascript
// ✅ GOOD: Import existing utility from .mjs module
import { validateEmail } from '../utils/validation.mjs';
import { API_ENDPOINTS } from '../constants/api.mjs';

// ✅ GOOD: Import component from .mjs module
import { Button } from '../components/Button/Button.mjs';

// ❌ BAD: Duplicating validation logic
function validateEmail(email) {
    // Same logic that exists elsewhere
}

// ❌ BAD: Wrong file extensions
import { validateEmail } from '../utils/validation.js';  // Should be .mjs
import styles from './styles.css.mjs';                  // CSS should be .css
```

### Good Practice - Creating Reusable Components
```javascript
// ✅ GOOD: Create reusable component with .mjs extension
// components/Button/Button.mjs
export function Button({ children, ...props }) {
    return <button {...props}>{children}</button>;
}

// ✅ GOOD: Import and use component from .mjs module
import { Button } from '../components/Button/Button.mjs';
```

### Good Practice - Module Export Patterns
```javascript
// ✅ GOOD: Named exports
export const API_ENDPOINTS = {
    users: '/api/users',
    posts: '/api/posts'
};

export function validateEmail(email) {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
}

// ✅ GOOD: Default export
export default class UserService {
    constructor() {
        // Service implementation
    }
}

// ✅ GOOD: Re-export pattern
export { Button } from './Button.mjs';
export { Input } from './Input.mjs';
```

### Good Practice - Import Organization
```javascript
// ✅ GOOD: Logical import grouping
// External libraries
import React from 'react';
import { useState, useEffect } from 'react';

// Internal modules
import { UserService } from '../services/user.service.mjs';
import { API_ENDPOINTS } from '../constants/api.mjs';

// Relative imports
import { Button } from './Button.mjs';
import { Input } from './Input.mjs';
```

## Chrome Extension Module Compatibility

### Module Loading in Extensions
- **Use .mjs extensions** for all ES6+ modules
- **Include type="module"** in HTML script tags
- **Verify Chrome extension compatibility** for all modules
- **Test module loading** in extension context
- **Ensure proper MIME types** for .mjs files
- **Verify file types** - ensure .mjs is only used for JavaScript modules

### Extension-Specific Import Patterns
```javascript
// ✅ GOOD: Import Chrome extension APIs
import { chrome } from 'chrome';

// ✅ GOOD: Import extension-specific modules
import { ExtensionService } from './extension.service.mjs';
import { StorageService } from './storage.service.mjs';

// ✅ GOOD: Import content scripts (but content scripts cannot be .mjs)
import { ContentScript } from './content-script.js';  // Note: .js, not .mjs

// ❌ BAD: Content scripts cannot use ES modules
// content-script.mjs  - This will NOT work in Chrome extensions
```

### Content Script Limitations
```javascript
// ❌ NOT ALLOWED: Content scripts cannot use ES modules
// content-script.mjs - This will cause errors

// ✅ REQUIRED: Content scripts must use regular .js files
// content-script.js - Standard JavaScript without import/export

// If you need modular code in content scripts:
// 1. Use regular .js files
// 2. Bundle modules into single .js file using Rollup/Webpack
// 3. Include bundled .js file as content script
```

## Benefits
- **No duplicate code** - Single source of truth for all functionality
- **Easier maintenance** - Changes only need to be made in one place
- **Better performance** - Smaller bundle sizes without duplication
- **Cleaner codebase** - Organized, maintainable structure
- **Faster development** - Reuse existing, tested code
- **Consistent behavior** - Same functionality works the same everywhere
- **Modern JavaScript support** - ES6+ modules with .mjs extensions
- **Chrome extension compliance** - Full support for latest policies
- **Future-proof architecture** - Ready for upcoming JavaScript features
- **Prevent file extension mistakes** - Clear guidelines for .mjs usage
- **Avoid Chrome extension errors** - Know exactly when to use .mjs
