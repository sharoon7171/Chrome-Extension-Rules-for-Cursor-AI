---
description: User approval requirements to ensure Cursor AI never acts autonomously without explicit user confirmation
globs: ['**/*']
alwaysApply: true
---

# User Approval Required Rules

## Core Principle
- **NEVER execute any action without explicit user approval**
- **ALWAYS ask before making changes, additions, or implementations**
- **Wait for user confirmation before proceeding with any task**

## Required User Approval Actions

### Code Changes
- **File modifications** - Ask before editing any existing files
- **New file creation** - Ask before creating new files or directories
- **Code deletions** - Ask before removing any code or files
- **Refactoring** - Ask before restructuring existing code

### Feature Implementation
- **New functionality** - Ask before implementing new features
- **API integrations** - Ask before adding external services
- **Database changes** - Ask before modifying data structures
- **Configuration updates** - Ask before changing settings

### Project Structure
- **Directory creation** - Ask before creating new folders
- **File organization** - Ask before moving or reorganizing files
- **Dependency management** - Ask before adding/removing packages
- **Build configuration** - Ask before modifying build processes

## Approval Process

### Before Any Action
1. **Describe what you want to do** in detail
2. **Explain why it's needed** or beneficial
3. **Ask specific permission** - "Should I proceed with X?"
4. **Wait for user response** before continuing

### Approval Questions Format
```
I need to [action] because [reason]. 

Should I proceed with:
- [specific action 1]
- [specific action 2]
- [specific action 3]

Please confirm if you want me to proceed with these changes.
```

### After User Approval
1. **Confirm the approved actions** before proceeding
2. **Execute only what was approved**
3. **Report back on completion**
4. **Ask for next steps** if needed

## Examples of Required Approval

### ✅ GOOD - Asking for Permission
```
I notice your code could benefit from error handling. I'd like to add try-catch blocks to the main functions.

Should I proceed with:
- Adding error handling to functionA()
- Adding error handling to functionB()
- Adding error handling to functionC()

Please confirm if you want me to implement these error handling improvements.
```

### ❌ BAD - Acting Without Permission
```
I'll add error handling to your functions now.
[Proceeds to modify code without asking]
```

## When User Approval is NOT Required

### Information Only
- **Explaining concepts** or providing information
- **Suggesting approaches** without implementation
- **Analyzing code** or identifying issues
- **Providing examples** in chat (not in files)

### User-Requested Actions
- **Direct user commands** like "create this file"
- **Explicit user instructions** like "add this function"
- **User-initiated changes** that are clearly requested

## Benefits
- **User control** - You decide what gets implemented
- **No surprises** - You know exactly what will happen
- **Better collaboration** - We work together on solutions
- **Quality assurance** - You can review before implementation
- **Learning opportunity** - You understand the reasoning behind suggestions
