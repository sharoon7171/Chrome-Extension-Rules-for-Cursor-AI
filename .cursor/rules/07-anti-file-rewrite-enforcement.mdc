---
description: Anti-file rewrite enforcement rules to prevent Cursor AI from rewriting entire files and ensure minimal, targeted changes only
globs: ['**/*']
alwaysApply: true
---

# 🚨 **ANTI-FILE REWRITE ENFORCEMENT RULES (CRITICAL - 100% COMPLIANCE)**

## Core Principle
- **NEVER rewrite entire files** - existing files are off-limits for complete rewrites
- **ONLY show specific changes** - use minimal, targeted modifications
- **PRESERVE existing code** - maintain all working functionality
- **USE incremental approach** - break large changes into small, focused parts
- **ENFORCE change limits** - maximum 50 lines per change

## 1. 🚨 **MANDATORY FILE REWRITE PREVENTION (100% COMPLIANCE)**

### Rule 1: Existing Files Are Off-Limits
- **EXISTING FILES CANNOT BE REWRITTEN** under any circumstances
- **ONLY modify specific lines** that need changes
- **PRESERVE ALL existing code** unless explicitly told to remove
- **USE Cursor AI editor** for targeted modifications
- **SHOW ONLY what needs to change** - never the entire file

### Rule 2: Mandatory Change Format
```
// ONLY show the specific change needed:

// ADD: New function after line 45
// ... existing code ...
function newFunction() {
    // Implementation here
}
// ... existing code ...

// OR

// REPLACE: Lines 23-25
- const oldValidation = checkData(userInput);
- if (oldValidation) {
-     processData(userInput);
+ const isValid = validateUserData(userInput);
+ if (isValid) {
+     processUserData(userInput);

// OR

// REMOVE: Lines 67-70 (deprecated function)
- /**
-  * @deprecated Use validateUserData instead
-  */
- function oldValidation() {
-     // Deprecated implementation
- }
```

### Rule 3: File Size-Based Enforcement
- **Files ≤ 100 lines**: Maximum 25 lines per change
- **Files 101-500 lines**: Maximum 50 lines per change
- **Files 501-1000 lines**: Maximum 25 lines per change
- **Files > 1000 lines**: Maximum 15 lines per change
- **Large modifications**: Break into multiple small changes

## 2. 🚨 **MINIMAL CHANGE ENFORCEMENT (100% COMPLIANCE)**

### Rule 4: Change Scope Limitations
- **Maximum change scope**: 50 lines per change
- **Multiple changes**: Break into separate operations
- **Large modifications**: Use iterative approach
- **File rewrites**: NEVER allowed without explicit permission

### Rule 5: Context Preservation Requirements
- **Show surrounding context**: 2-3 lines before and after changes
- **Use line numbers**: Reference specific line numbers for changes
- **Maintain file structure**: Don't break existing organization
- **Preserve imports**: Keep all existing import statements

### Rule 6: Change Documentation Standards
- **Document every change**: What was changed and why
- **Use clear markers**: `// ADD:`, `// REPLACE:`, `// REMOVE:`
- **Reference line numbers**: Always specify where changes go
- **Explain purpose**: Why the change is needed

## 3. 🚨 **ANTI-REWRITE ENFORCEMENT MECHANISMS**

### Mechanism 1: File Existence Check
```bash
# ALWAYS check if file exists before suggesting changes
if [ -f "filename.mjs" ]; then
    echo "🚨 FILE EXISTS - INCREMENTAL CHANGES ONLY"
    echo "❌ NO FILE REWRITES ALLOWED"
    echo "✅ USE SEARCH AND REPLACE ONLY"
else
    echo "✅ NEW FILE - PROVIDE MINIMAL BOILERPLATE + SPECIFIC ADDITIONS"
fi
```

### Mechanism 2: Change Size Validation
```bash
# Validate change size before applying
change_lines=$(echo "$proposed_change" | wc -l)
if [ "$change_lines" -gt 50 ]; then
    echo "🚨 CHANGE TOO LARGE - BREAK INTO SMALLER PARTS"
    echo "❌ Maximum allowed: 50 lines per change"
    echo "✅ Current size: $change_lines lines"
    echo "✅ Required: Break into $(($change_lines / 50 + 1)) parts"
fi
```

### Mechanism 3: File Rewrite Detection
```bash
# Prevent file rewrites
if [[ "$proposed_change" == *"entire file"* ]] || \
   [[ "$proposed_change" == *"complete rewrite"* ]] || \
   [[ "$proposed_change" == *"full file"* ]] || \
   [[ "$proposed_change" == *"whole file"* ]]; then
    echo "🚨 FILE REWRITE DETECTED - STOP IMMEDIATELY"
    echo "❌ NO FILE REWRITES ALLOWED"
    echo "✅ USE INCREMENTAL CHANGES ONLY"
    exit 1
fi
```

### Mechanism 4: Context Verification
```bash
# Verify context is preserved
if [[ "$proposed_change" != *"// ... existing code ..."* ]] && \
   [[ "$proposed_change" != *"existing code"* ]]; then
    echo "⚠️ CONTEXT MARKERS MISSING"
    echo "✅ Add '// ... existing code ...' markers"
    echo "✅ Show surrounding context for changes"
fi
```

## 4. 🚨 **RULE VIOLATION PENALTIES (ENFORCED)**

### Penalties for File Rewrites
- **File Rewrite Violation**: If Cursor AI rewrites entire files
  - **Penalty**: Must immediately stop and use incremental changes
  - **Verification**: Must prove only specific lines were changed
  - **Documentation**: Must document the violation and correction
  - **Repeat Offense**: Additional penalties for multiple violations

### Penalties for Large Changes
- **Large Change Violation**: If Cursor AI makes changes > 50 lines
  - **Penalty**: Must break into smaller, focused changes
  - **Verification**: Must prove changes are under 50 lines each
  - **Documentation**: Must document the violation and correction
  - **Size Reduction**: Must reduce change size by 50% minimum

### Penalties for Context Loss
- **Context Loss Violation**: If Cursor AI loses file context
  - **Penalty**: Must reread file and regain context
  - **Verification**: Must prove context understanding
  - **Documentation**: Must document the violation and correction
  - **Context Restoration**: Must show surrounding code for all changes

### Penalties for Missing Markers
- **Missing Markers Violation**: If Cursor AI doesn't use change markers
  - **Penalty**: Must add proper change markers
  - **Verification**: Must prove markers are used correctly
  - **Documentation**: Must document the violation and correction
  - **Marker Standardization**: Must use consistent marker format

## 5. 🚨 **MINIMAL CHANGE EXAMPLES**

### Example 1: Adding a Function
```javascript
// ADD: New function after line 45
// ... existing code ...

/**
 * Validates user input data
 * @param {Object} data - User input data
 * @returns {boolean} - Validation result
 */
function validateUserData(data) {
    return data && typeof data === 'object' && data.name && data.email;
}

// ... existing code ...
```

### Example 2: Modifying Existing Code
```javascript
// REPLACE: Lines 23-25
- const oldValidation = checkData(userInput);
- if (oldValidation) {
-     processData(userInput);
+ const isValid = validateUserData(userInput);
+ if (isValid) {
+     processUserData(userInput);
```

### Example 3: Adding Import Statement
```javascript
// ADD: Import statement at line 3
import { validateUserData } from './validation.mjs';
// ... existing code ...
```

### Example 4: Removing Code
```javascript
// REMOVE: Lines 67-70 (deprecated function)
- /**
-  * @deprecated Use validateUserData instead
-  */
- function oldValidation() {
-     // Deprecated implementation
- }
```

### Example 5: Multiple Small Changes
```javascript
// CHANGE 1: Update function name at line 15
- function processData(data) {
+ function processUserData(data) {

// CHANGE 2: Update function call at line 45
- processData(userInput);
+ processUserData(userInput);

// CHANGE 3: Update comment at line 67
- // Process user data
+ // Process and validate user data
```

## 6. 🚨 **RULE TESTING MECHANISM**

### Test 1: File Rewrite Prevention
```bash
echo "🎯 TESTING FILE REWRITE PREVENTION..."
echo "If Cursor AI rewrites entire files, rule violation detected"
echo "Expected: Only specific changes shown"
echo "Actual: Check response for complete file content"
echo "Violation: File rewrite detected - STOP IMMEDIATELY"
```

### Test 2: Change Size Validation
```bash
echo "🎯 TESTING CHANGE SIZE VALIDATION..."
echo "If Cursor AI shows changes > 50 lines, rule violation detected"
echo "Expected: Changes under 50 lines each"
echo "Actual: Count lines in proposed changes"
echo "Violation: Change too large - break into smaller parts"
```

### Test 3: Context Preservation
```bash
echo "🎯 TESTING CONTEXT PRESERVATION..."
echo "If Cursor AI loses file context, rule violation detected"
echo "Expected: Clear reference to existing code structure"
echo "Actual: Check for context markers and line numbers"
echo "Violation: Context lost - regain understanding"
```

### Test 4: Change Markers
```bash
echo "🎯 TESTING CHANGE MARKERS..."
echo "If Cursor AI doesn't use change markers, rule violation detected"
echo "Expected: ADD, REPLACE, REMOVE markers with line numbers"
echo "Actual: Check for proper change documentation"
echo "Violation: Missing markers - add proper documentation"
```

## 7. 🚨 **EMERGENCY PROCEDURES**

### If File Rewrite is Detected
1. **STOP immediately** - don't continue with rewrite
2. **Switch to incremental changes** - show only what needs to change
3. **Use Cursor AI editor** - target specific lines only
4. **Preserve existing code** - don't remove working functionality
5. **Document the violation** - record what went wrong
6. **Apply penalties** - follow violation correction procedures

### If Large Changes are Detected
1. **Break into smaller parts** - maximum 50 lines per change
2. **Use iterative approach** - one change at a time
3. **Maintain context** - show surrounding code for each change
4. **Verify each change** - ensure it's focused and specific
5. **Document the process** - explain how changes were broken down
6. **Apply size reduction** - reduce change size by 50% minimum

### If Context is Lost
1. **Reread the file** - regain understanding of structure
2. **Use line numbers** - reference specific locations
3. **Show surrounding code** - provide context for changes
4. **Explain relationships** - how changes fit into existing code
5. **Verify understanding** - confirm context is restored
6. **Add context markers** - use `// ... existing code ...` consistently

### If Change Markers are Missing
1. **Add proper markers** - use ADD, REPLACE, REMOVE format
2. **Include line numbers** - reference exact locations
3. **Show surrounding context** - 2-3 lines before and after
4. **Explain purpose** - why each change is needed
5. **Verify markers** - ensure consistent format
6. **Document violations** - record what was missing

## 8. Benefits of Anti-File Rewrite Enforcement

### Performance Benefits
- **Faster response times** - no unnecessary code generation
- **Reduced token usage** - focus on what actually needs to change
- **Better network performance** - smaller responses, fewer timeouts
- **Improved reliability** - less chance of generation errors

### Development Benefits
- **Clearer changes** - easy to see what was modified
- **Better version control** - focused commits with clear purposes
- **Easier debugging** - changes are isolated and specific
- **Faster iteration** - quick changes without full file processing

### Maintenance Benefits
- **Preserved functionality** - existing code remains intact
- **Reduced risk** - smaller changes are less likely to break things
- **Better documentation** - clear record of what changed and why
- **Easier rollback** - specific changes can be undone individually

### User Experience Benefits
- **Faster responses** - no waiting for complete file rewrites
- **Clearer instructions** - easy to understand what needs to change
- **Reduced confusion** - no wondering what the entire file looks like
- **Better focus** - attention on specific changes only

## 9. Implementation Checklist

### Before Making Any Changes
- [ ] **File exists check** - is this a new file or existing file?
- [ ] **File size assessment** - how many lines does the file have?
- [ ] **Change scope planning** - what specific lines need modification?
- [ ] **Context understanding** - what surrounds the areas to change?
- [ ] **Incremental approach** - can this be broken into smaller changes?
- [ ] **Change size validation** - will changes be under 50 lines?

### During Change Implementation
- [ ] **Use specific line numbers** - reference exact locations
- [ ] **Show surrounding context** - 2-3 lines before and after
- [ ] **Use clear markers** - ADD, REPLACE, REMOVE
- [ ] **Preserve existing code** - don't remove unless explicitly told
- [ ] **Document changes** - explain what and why
- [ ] **Maintain file structure** - don't break existing organization

### After Change Implementation
- [ ] **Verify change size** - ensure under 50 lines
- [ ] **Check context preservation** - ensure surrounding code intact
- [ ] **Verify change markers** - ensure proper documentation
- [ ] **Document violations** - if any rules were broken
- [ ] **Provide rollback info** - how to undo if needed
- [ ] **Confirm completion** - verify all requested changes made

## 10. Rule Compliance Monitoring

### Real-Time Compliance Checks
- **Monitor every change** for file rewrite attempts
- **Validate change sizes** against 50-line limit
- **Verify context markers** are used correctly
- **Check line number references** for accuracy
- **Ensure incremental approach** is followed

### Compliance Reporting
```bash
# Daily compliance report
echo "🎯 ANTI-FILE REWRITE COMPLIANCE REPORT - $(date)"
echo "Total changes made: $total_changes"
echo "File rewrites prevented: $rewrites_prevented"
echo "Large changes broken down: $large_changes_broken"
echo "Context violations corrected: $context_violations"
echo "Marker violations corrected: $marker_violations"
echo "Overall compliance: $compliance_percentage%"
```

### Violation Tracking
- **Log all violations** with timestamps and details
- **Track repeat offenders** for additional penalties
- **Monitor correction success** rates
- **Report violations** to user immediately
- **Document corrective actions** taken

## Conclusion

These anti-file rewrite enforcement rules ensure that Cursor AI NEVER rewrites entire files and ALWAYS uses minimal, incremental changes. The strict enforcement mechanisms prevent file rewrites, limit change scope, maintain code context, and ensure proper change documentation.

**Remember: NO FILE REWRITES EVER, MINIMAL CHANGES ONLY, CONTEXT PRESERVATION MANDATORY!**

## Rule Verification Status

- **File rewrite prevention**: ✅ ENFORCED
- **Change size limits**: ✅ ENFORCED  
- **Context preservation**: ✅ ENFORCED
- **Change markers**: ✅ ENFORCED
- **Incremental approach**: ✅ ENFORCED
- **Rule violations**: ✅ PENALIZED
- **Compliance monitoring**: ✅ ACTIVE

**Status: ALL ANTI-REWRITE RULES ACTIVE - FILE REWRITES COMPLETELY PREVENTED**
